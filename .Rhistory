load("temp/s4rposout after conditions and original adjustion2016-06-06 08-54-08.RData")
bt <- read.csv(file="input/bad things.csv",check.names=F,stringsAsFactors=F)
possession_codes <- read.csv("input/possession_codes.csv", check.names=F, stringsAsFactors = F)
s5.rposout <- rposout
# Exceptionu nuskaitymas, kad imtu kitoki pritempimo buda atitinkamai saliai x produktui
bt.other.method <- bt[bt$Issue=="originals.other.method",]
source("originals_othermethod.R")
bt
bt <- read.csv(file="input/bad things.csv",check.names=F,stringsAsFactors=F, sep=";")
bt
s5.rposout <- rposout
bt.other.method <- bt[bt$Issue=="originals.other.method",]
source("originals_othermethod.R")
hp
hp <- read.csv(file=lastinput("input/Original data"),check.names=F,stringsAsFactors=F)
# išmetam šalis, kurių galėjo būti originaliuose duomenyse, bet mums jų nereikia
hp <- hp[hp$CountryCode %in% intersect(unique(hp$CountryCode),unique(rposout$CountryCode)),]
# jei yra 2004 metų taškas, priskiriame jį 2005 metams
hp[apply(hp[,years2],1,function(x){all(is.na(x))}) & !is.na(hp[,"2004"]),"2005"] <-
hp[apply(hp[,years2],1,function(x){all(is.na(x))}) & !is.na(hp[,"2004"]),"2004"]
# kurie originalus islipa is veziu
hp[unique(which(hp[,years2]>100,arr.ind = T)[,1]),]
hp[unique(which(hp[,years2]<0,arr.ind = T)[,1]),]
hp[duplicated(hp[,c("RegionCode","ProductName")]),]
##
hp <- hp[!duplicated(hp[,c("RegionCode","ProductName")]),]
source("mid108(2).R")
source("functions.R")
library("grid")
#emibase()
load("input/EMI base.RData")
options(scipen = 7)
# INPUT -------------------------------------------------------------------
# inputas pasiima pacias naujausias versijas
# is possessions by decile csv file'o, padarome Rdata file'a,
# kuriame idedam naujus possessions by decile (is csv) ir Average income by decile is senesnio Rdata file'o.
# dirname1 <- "input/Possessions by Decile/final_poss_by_decile csv/"
# dirname2 <- "input/Possessions by Decile/final_poss_by_decile RData/"
# create.possessions.by.decile.RData(dirname1, dirname2)
load(lastinput("input/Possessions by Decile/final_poss_by_decile RData"))
pd <- arrange(final.pbd,Decile.No,Year,CountryName) # possessions by decile
kof <- read.csv(file=lastinput("input/Income abq"),check.names=F,stringsAsFactors=F)
possession_codes <- read.csv("input/possession_codes.csv", check.names=F, stringsAsFactors = F)
bt <- read.csv(file="input/bad things.csv",check.names=F,stringsAsFactors=F, sep=";")
# kodėl reikalingas šitas kof koregavimas? imi 1,3,4 stulpelį ir ten pridedi kažkokius minusus???
kof <- kof[which(!(duplicated(apply(kof[,c(1,3,4)],1,function(x){paste(x,collapse="-")})))),]
abqUSD <- kof
ccid <- read.csv(file="input/city codes id.csv",check.names=F,stringsAsFactors=F)
years <- as.character(2005:2030)
tier <- read.csv(file="input/Region city mapping file.csv",check.names=F,stringsAsFactors=F)
tier[,"RegionCode"] <- substr(tier[,"RegionCode"],1,4)
regnew <- read.csv(file="input/Region codes new.csv",check.names=F,stringsAsFactors=F)
tier <- merge(tier,regnew[c("RegionCode","RegionCodeOld")],all.x=T,by="RegionCode")
hp <- read.csv(file=lastinput("input/Original data"),check.names=F,stringsAsFactors=F)
# išmetam šalis, kurių galėjo būti originaliuose duomenyse, bet mums jų nereikia
hp <- hp[hp$CountryCode %in% intersect(unique(hp$CountryCode),unique(rposout$CountryCode)),]
# jei yra 2004 metų taškas, priskiriame jį 2005 metams
hp[apply(hp[,years2],1,function(x){all(is.na(x))}) & !is.na(hp[,"2004"]),"2005"] <-
hp[apply(hp[,years2],1,function(x){all(is.na(x))}) & !is.na(hp[,"2004"]),"2004"]
# kurie originalus islipa is veziu
hp[unique(which(hp[,years2]>100,arr.ind = T)[,1]),]
hp[unique(which(hp[,years2]<0,arr.ind = T)[,1]),]
hp[duplicated(hp[,c("RegionCode","ProductName")]),]
years <- as.character(2005:2030)
years2 <- as.character(2005:2020)
hp <- hp[hp$CountryCode %in% intersect(unique(hp$CountryCode),unique(rposout$CountryCode)),]
# jei yra 2004 metų taškas, priskiriame jį 2005 metams
hp[apply(hp[,years2],1,function(x){all(is.na(x))}) & !is.na(hp[,"2004"]),"2005"] <-
hp[apply(hp[,years2],1,function(x){all(is.na(x))}) & !is.na(hp[,"2004"]),"2004"]
# kurie originalus islipa is veziu
hp[unique(which(hp[,years2]>100,arr.ind = T)[,1]),]
hp[unique(which(hp[,years2]<0,arr.ind = T)[,1]),]
hp[duplicated(hp[,c("RegionCode","ProductName")]),]
##
hp <- hp[!duplicated(hp[,c("RegionCode","ProductName")]),]
hp <- make.fakes(hpregion, hp, dont.make, possession_codes)
hp <- read.csv(file=lastinput("input/Original data"),check.names=F,stringsAsFactors=F)
# išmetam šalis, kurių galėjo būti originaliuose duomenyse, bet mums jų nereikia
hp <- hp[hp$CountryCode %in% intersect(unique(hp$CountryCode),unique(rposout$CountryCode)),]
# jei yra 2004 metų taškas, priskiriame jį 2005 metams
hp[apply(hp[,years2],1,function(x){all(is.na(x))}) & !is.na(hp[,"2004"]),"2005"] <-
hp[apply(hp[,years2],1,function(x){all(is.na(x))}) & !is.na(hp[,"2004"]),"2004"]
# kurie originalus islipa is veziu
hp[unique(which(hp[,years2]>100,arr.ind = T)[,1]),]
hp[unique(which(hp[,years2]<0,arr.ind = T)[,1]),]
hp[duplicated(hp[,c("RegionCode","ProductName")]),]
## 
hp <- hp[!duplicated(hp[,c("RegionCode","ProductName")]),]
###
# isbreziami grafikai (sita irgi galim komentuot jei nenorim kad breztu)
# original.data.barplots(hp,avicity,filename = "plots/3. Original data barplots/Original data barplots ",info1 = "Original Data Barplots",info2 = "Blue - Total, Green - Region, Yellow - City")
##
# idsnames <- unique(hp[,c("ProductID","ProductName")])
pnii <- unique(pd[,c("Possession","ProductID")])
# hp <- hp[hp$CountryCode %in% c("CO"),] # 
#countries and poss for these not making fakes
dont.make.fakes <- bt[bt$Issue=="dont.make.fakes",]
### Kodėl ne visi regionai yra tarp sumodeliuotų?? nes
### po antro veiksmo sumažėja duomenų
hpregion <- unique(hp[,c("RegionCode")])
hpregion <- intersect(hpregion,rposout$CityCode)
# hpregion <- hpregion[!hpregion$RegionCode %in% unique(hp$CountryCode),]
# prikabinimas product ID
rposout <- merge(rposout,possession_codes,by.x="Possession",by.y="ProductName",all.x=T)
rposout <- arrange(rposout,CityCode,Possession,CountryCode)
rposout[is.na(rposout$ProductID) & rposout$Possession=="Possession of Black and White TV Set","ProductID"]  <-  2496
#isorderinama, kad is pradziu prikabintu totalus, jei nera, o tik tada miestam uzvarytu
hpregion <- c(hpregion[hpregion %in% rposout$CountryCode],hpregion[!hpregion %in% rposout$CountryCode])
hp <- make.fakes(hpregion, hp, dont.make, possession_codes)
source("mid108(2).R")
source("functions.R")
library("grid")
#emibase()
load("input/EMI base.RData")
options(scipen = 7)
# INPUT -------------------------------------------------------------------
# inputas pasiima pacias naujausias versijas
# is possessions by decile csv file'o, padarome Rdata file'a,
# kuriame idedam naujus possessions by decile (is csv) ir Average income by decile is senesnio Rdata file'o.
# dirname1 <- "input/Possessions by Decile/final_poss_by_decile csv/"
# dirname2 <- "input/Possessions by Decile/final_poss_by_decile RData/"
# create.possessions.by.decile.RData(dirname1, dirname2)
load(lastinput("input/Possessions by Decile/final_poss_by_decile RData"))
pd <- arrange(final.pbd,Decile.No,Year,CountryName) # possessions by decile
kof <- read.csv(file=lastinput("input/Income abq"),check.names=F,stringsAsFactors=F)
possession_codes <- read.csv("input/possession_codes.csv", check.names=F, stringsAsFactors = F)
bt <- read.csv(file="input/bad things.csv",check.names=F,stringsAsFactors=F, sep=";")
# kodėl reikalingas šitas kof koregavimas? imi 1,3,4 stulpelį ir ten pridedi kažkokius minusus???
kof <- kof[which(!(duplicated(apply(kof[,c(1,3,4)],1,function(x){paste(x,collapse="-")})))),]
abqUSD <- kof
ccid <- read.csv(file="input/city codes id.csv",check.names=F,stringsAsFactors=F)
years <- as.character(2005:2030)
years <- as.character(2005:2030)
years2 <- as.character(2005:2020)
tier <- read.csv(file="input/Region city mapping file.csv",check.names=F,stringsAsFactors=F)
tier[,"RegionCode"] <- substr(tier[,"RegionCode"],1,4)
regnew <- read.csv(file="input/Region codes new.csv",check.names=F,stringsAsFactors=F)
tier <- merge(tier,regnew[c("RegionCode","RegionCodeOld")],all.x=T,by="RegionCode")
load("temp/s2rposout only after income2016-06-06 07-19-18.RData") # sita reikia uzsiloadint, jei norim daryt nuo tos stadijos, kai jau turim susimodeliave pagal income
rposout <- s2rposout
hp <- read.csv(file=lastinput("input/Original data"),check.names=F,stringsAsFactors=F)
# išmetam šalis, kurių galėjo būti originaliuose duomenyse, bet mums jų nereikia
hp <- hp[hp$CountryCode %in% intersect(unique(hp$CountryCode),unique(rposout$CountryCode)),]
# jei yra 2004 metų taškas, priskiriame jį 2005 metams
hp[apply(hp[,years2],1,function(x){all(is.na(x))}) & !is.na(hp[,"2004"]),"2005"] <-
hp[apply(hp[,years2],1,function(x){all(is.na(x))}) & !is.na(hp[,"2004"]),"2004"]
# kurie originalus islipa is veziu
hp[unique(which(hp[,years2]>100,arr.ind = T)[,1]),]
hp[unique(which(hp[,years2]<0,arr.ind = T)[,1]),]
hp[duplicated(hp[,c("RegionCode","ProductName")]),]
## 
hp <- hp[!duplicated(hp[,c("RegionCode","ProductName")]),]
###
# isbreziami grafikai (sita irgi galim komentuot jei nenorim kad breztu)
# original.data.barplots(hp,avicity,filename = "plots/3. Original data barplots/Original data barplots ",info1 = "Original Data Barplots",info2 = "Blue - Total, Green - Region, Yellow - City")
##
# idsnames <- unique(hp[,c("ProductID","ProductName")])
pnii <- unique(pd[,c("Possession","ProductID")])
# hp <- hp[hp$CountryCode %in% c("CO"),] # 
#countries and poss for these not making fakes
dont.make.fakes <- bt[bt$Issue=="dont.make.fakes",]
### Kodėl ne visi regionai yra tarp sumodeliuotų?? nes
### po antro veiksmo sumažėja duomenų
hpregion <- unique(hp[,c("RegionCode")])
hpregion <- intersect(hpregion,rposout$CityCode)
# hpregion <- hpregion[!hpregion$RegionCode %in% unique(hp$CountryCode),]
# prikabinimas product ID
rposout <- merge(rposout,possession_codes,by.x="Possession",by.y="ProductName",all.x=T)
rposout <- arrange(rposout,CityCode,Possession,CountryCode)
rposout[is.na(rposout$ProductID) & rposout$Possession=="Possession of Black and White TV Set","ProductID"]  <-  2496
#isorderinama, kad is pradziu prikabintu totalus, jei nera, o tik tada miestam uzvarytu
hpregion <- c(hpregion[hpregion %in% rposout$CountryCode],hpregion[!hpregion %in% rposout$CountryCode])
# hpregion <- c("ID", paste0("ID0", 1:9), paste0("ID", 10:16), paste0("R", 330:362))
###########################################################################
# FIKTYVIU ORIGINALIU DUOMENU SUKURIMAS -----------------------------------
###########################################################################
# sukuria fiktyvius duomenis 1) internet ir broadband internet; 2) bei cable TV, satellite, colour TV
# atvejais, kai yra bent vienas is grupes sukuriami fiktyvus duomenys,
# pvz. jeigu miestui turim colour TV, tai sukriam sattellite ir cable TV.
hp <- make.fakes(hpregion, hp, dont.make, possession_codes)
load("temp/s4rposout after conditions and original adjustion2016-06-06 08-54-08.RData")
s5.rposout <- rposout
# Exceptionu nuskaitymas, kad imtu kitoki pritempimo buda atitinkamai saliai x produktui
bt.other.method <- bt[bt$Issue=="originals.other.method",]
source("originals_othermethod.R")
source("mid108(2).R")
source("functions.R")
library("grid")
#emibase()
load("input/EMI base.RData")
options(scipen = 7)
# INPUT -------------------------------------------------------------------
# inputas pasiima pacias naujausias versijas
# is possessions by decile csv file'o, padarome Rdata file'a,
# kuriame idedam naujus possessions by decile (is csv) ir Average income by decile is senesnio Rdata file'o.
# dirname1 <- "input/Possessions by Decile/final_poss_by_decile csv/"
# dirname2 <- "input/Possessions by Decile/final_poss_by_decile RData/"
# create.possessions.by.decile.RData(dirname1, dirname2)
load(lastinput("input/Possessions by Decile/final_poss_by_decile RData"))
pd <- arrange(final.pbd,Decile.No,Year,CountryName) # possessions by decile
kof <- read.csv(file=lastinput("input/Income abq"),check.names=F,stringsAsFactors=F)
possession_codes <- read.csv("input/possession_codes.csv", check.names=F, stringsAsFactors = F)
bt <- read.csv(file="input/bad things.csv",check.names=F,stringsAsFactors=F, sep=";")
# kodėl reikalingas šitas kof koregavimas? imi 1,3,4 stulpelį ir ten pridedi kažkokius minusus???
kof <- kof[which(!(duplicated(apply(kof[,c(1,3,4)],1,function(x){paste(x,collapse="-")})))),]
abqUSD <- kof
ccid <- read.csv(file="input/city codes id.csv",check.names=F,stringsAsFactors=F)
years <- as.character(2005:2030)
years <- as.character(2005:2030)
years2 <- as.character(2005:2020)
tier <- read.csv(file="input/Region city mapping file.csv",check.names=F,stringsAsFactors=F)
tier[,"RegionCode"] <- substr(tier[,"RegionCode"],1,4)
regnew <- read.csv(file="input/Region codes new.csv",check.names=F,stringsAsFactors=F)
tier <- merge(tier,regnew[c("RegionCode","RegionCodeOld")],all.x=T,by="RegionCode")
load("temp/s2rposout only after income2016-06-06 07-19-18.RData") # sita reikia uzsiloadint, jei norim daryt nuo tos stadijos, kai jau turim susimodeliave pagal income
rposout <- s2rposout
hp <- read.csv(file=lastinput("input/Original data"),check.names=F,stringsAsFactors=F)
# išmetam šalis, kurių galėjo būti originaliuose duomenyse, bet mums jų nereikia
hp <- hp[hp$CountryCode %in% intersect(unique(hp$CountryCode),unique(rposout$CountryCode)),]
# jei yra 2004 metų taškas, priskiriame jį 2005 metams
hp[apply(hp[,years2],1,function(x){all(is.na(x))}) & !is.na(hp[,"2004"]),"2005"] <-
hp[apply(hp[,years2],1,function(x){all(is.na(x))}) & !is.na(hp[,"2004"]),"2004"]
# kurie originalus islipa is veziu
hp[unique(which(hp[,years2]>100,arr.ind = T)[,1]),]
hp[unique(which(hp[,years2]<0,arr.ind = T)[,1]),]
hp[duplicated(hp[,c("RegionCode","ProductName")]),]
## 
hp <- hp[!duplicated(hp[,c("RegionCode","ProductName")]),]
###
# isbreziami grafikai (sita irgi galim komentuot jei nenorim kad breztu)
# original.data.barplots(hp,avicity,filename = "plots/3. Original data barplots/Original data barplots ",info1 = "Original Data Barplots",info2 = "Blue - Total, Green - Region, Yellow - City")
##
# idsnames <- unique(hp[,c("ProductID","ProductName")])
pnii <- unique(pd[,c("Possession","ProductID")])
# hp <- hp[hp$CountryCode %in% c("CO"),] # 
#countries and poss for these not making fakes
dont.make.fakes <- bt[bt$Issue=="dont.make.fakes",]
### Kodėl ne visi regionai yra tarp sumodeliuotų?? nes
### po antro veiksmo sumažėja duomenų
hpregion <- unique(hp[,c("RegionCode")])
hpregion <- intersect(hpregion,rposout$CityCode)
# hpregion <- hpregion[!hpregion$RegionCode %in% unique(hp$CountryCode),]
# prikabinimas product ID
rposout <- merge(rposout,possession_codes,by.x="Possession",by.y="ProductName",all.x=T)
rposout <- arrange(rposout,CityCode,Possession,CountryCode)
rposout[is.na(rposout$ProductID) & rposout$Possession=="Possession of Black and White TV Set","ProductID"]  <-  2496
#isorderinama, kad is pradziu prikabintu totalus, jei nera, o tik tada miestam uzvarytu
hpregion <- c(hpregion[hpregion %in% rposout$CountryCode],hpregion[!hpregion %in% rposout$CountryCode])
# hpregion <- c("ID", paste0("ID0", 1:9), paste0("ID", 10:16), paste0("R", 330:362))
###########################################################################
# FIKTYVIU ORIGINALIU DUOMENU SUKURIMAS -----------------------------------
###########################################################################
# sukuria fiktyvius duomenis 1) internet ir broadband internet; 2) bei cable TV, satellite, colour TV
# atvejais, kai yra bent vienas is grupes sukuriami fiktyvus duomenys,
# pvz. jeigu miestui turim colour TV, tai sukriam sattellite ir cable TV.
hp <- make.fakes(hpregion, hp, dont.make, possession_codes)
s8rposout <- rposout
load("temp/s4rposout after conditions and original adjustion2016-06-06 08-54-08.RData")
s5.rposout <- rposout
# Exceptionu nuskaitymas, kad imtu kitoki pritempimo buda atitinkamai saliai x produktui
bt.other.method <- bt[bt$Issue=="originals.other.method",]
source("originals_othermethod.R")
rposout <- issue.smooth(bt, rposout)
rposout <- issue.stretch.f(bt, rposout)
rposout <- issue.total.ratio.f(bt, rposout)
graphs.Badthings.adjustion(bt, rposout, s5.rposout,
filename= "plots/6. Badthings adjustion/Badthings adjustion ")
dev.off()
dev.off()
pdftitle <- paste0(filename,gsub(":","-",Sys.time()),".pdf")
pdf(pdftitle,width=16 * 0.75,height=13 * 0.5)
print(titlepage("Bad Things","Possession after Adjustion",date=Sys.time(),size=15,author="Povilas Bockus"))
# changed graphs
# ucp <- unique(bt[,c(1,3,4)])
# ucp <- unique(bt[,c(1,2,3,4)])
ucp <- bt
ucp <- ucp[ucp$Issue!="dont.make.fakes",]
for(index in 1:nrow(ucp)){
print(index)
x <- ucp[index,]
if(x$City=="all"){
xnew <- rposout[rposout$CountryCode==x$CountryCode[1] & rposout$Possession==x$ProductName[1],]
xold <- s5.rposout[s5.rposout$CountryCode==x$CountryCode[1] & s5.rposout$Possession==x$ProductName[1],]
} else {
xnew <- rposout[rposout$CountryCode==x$CountryCode[1] & rposout$Possession==x$ProductName[1] & rposout$City %in% c("Total",x$City[1]),]
xold <- s5.rposout[s5.rposout$CountryCode==x$CountryCode[1] & s5.rposout$Possession==x$ProductName[1] & rposout$City %in% c("Total",x$City[1]),]
}
xnew2 <- data.frame(t(xnew[,years]))
xold2 <- data.frame(t(xold[,years]))
names(xnew2) <- xnew$City
names(xold2) <- xold$City
matplotf(xold2,text=T,legend=F,abline=c(0,100),stx=2005,
main=paste(x$CountryCode[1],x$ProductName[1],x$Issue[1],x$City[1],"BEFORE",sep=" - "))
lines(2005:2030,xold2$Total,lwd=3)
matplotf(xnew2,text=T,legend=F,abline=c(0,100),stx=2005,
main=paste(x$CountryCode[1],x$ProductName[1],x$Issue[1],x$City[1],"AFTER",sep=" - "))
lines(2005:2030,xnew2$Total,lwd=3)
}
dev.off()
print(index)
x <- ucp[index,]
x
(x$City=="all")
xnew <- rposout[rposout$CountryCode==x$CountryCode[1] & rposout$Possession==x$ProductName[1],]
xold <- s5.rposout[s5.rposout$CountryCode==x$CountryCode[1] & s5.rposout$Possession==x$ProductName[1],]
xnew2 <- data.frame(t(xnew[,years]))
xold2 <- data.frame(t(xold[,years]))
names(xnew2) <- xnew$City
names(xold2) <- xold$City
matplotf(xold2,text=T,legend=F,abline=c(0,100),stx=2005,
main=paste(x$CountryCode[1],x$ProductName[1],x$Issue[1],x$City[1],"BEFORE",sep=" - "))
xnew2
xold2
rposout[rposout$CountryCode==x$CountryCode[1] & rposout$Possession==x$ProductName[1],]
x$CountryCode[1]
source("mid108(2).R")
source("functions.R")
library("grid")
#emibase()
load("input/EMI base.RData")
options(scipen = 7)
# INPUT -------------------------------------------------------------------
# inputas pasiima pacias naujausias versijas
# is possessions by decile csv file'o, padarome Rdata file'a,
# kuriame idedam naujus possessions by decile (is csv) ir Average income by decile is senesnio Rdata file'o.
# dirname1 <- "input/Possessions by Decile/final_poss_by_decile csv/"
# dirname2 <- "input/Possessions by Decile/final_poss_by_decile RData/"
# create.possessions.by.decile.RData(dirname1, dirname2)
load(lastinput("input/Possessions by Decile/final_poss_by_decile RData"))
pd <- arrange(final.pbd,Decile.No,Year,CountryName) # possessions by decile
kof <- read.csv(file=lastinput("input/Income abq"),check.names=F,stringsAsFactors=F)
possession_codes <- read.csv("input/possession_codes.csv", check.names=F, stringsAsFactors = F)
bt <- read.csv(file="input/bad things.csv",check.names=F,stringsAsFactors=F, sep=";")
# kodėl reikalingas šitas kof koregavimas? imi 1,3,4 stulpelį ir ten pridedi kažkokius minusus???
kof <- kof[which(!(duplicated(apply(kof[,c(1,3,4)],1,function(x){paste(x,collapse="-")})))),]
abqUSD <- kof
ccid <- read.csv(file="input/city codes id.csv",check.names=F,stringsAsFactors=F)
years <- as.character(2005:2030)
years <- as.character(2005:2030)
years2 <- as.character(2005:2020)
tier <- read.csv(file="input/Region city mapping file.csv",check.names=F,stringsAsFactors=F)
tier[,"RegionCode"] <- substr(tier[,"RegionCode"],1,4)
regnew <- read.csv(file="input/Region codes new.csv",check.names=F,stringsAsFactors=F)
tier <- merge(tier,regnew[c("RegionCode","RegionCodeOld")],all.x=T,by="RegionCode")
cities.possession.graphs.grubus.only.after.income(rposout,filename="plots/2. Forecasted possessions only from income/Forecasted possessions only from income ",
info1="Possessions of Durables",info2="Forecasts only after income method step")
load("temp/s2rposout only after income2016-06-06 07-19-18.RData") # sita reikia uzsiloadint, jei norim daryt nuo tos stadijos, kai jau turim susimodeliave pagal income
rposout <- s2rposout
hp <- read.csv(file=lastinput("input/Original data"),check.names=F,stringsAsFactors=F)
# išmetam šalis, kurių galėjo būti originaliuose duomenyse, bet mums jų nereikia
hp <- hp[hp$CountryCode %in% intersect(unique(hp$CountryCode),unique(rposout$CountryCode)),]
# jei yra 2004 metų taškas, priskiriame jį 2005 metams
hp[apply(hp[,years2],1,function(x){all(is.na(x))}) & !is.na(hp[,"2004"]),"2005"] <-
hp[apply(hp[,years2],1,function(x){all(is.na(x))}) & !is.na(hp[,"2004"]),"2004"]
# kurie originalus islipa is veziu
hp[unique(which(hp[,years2]>100,arr.ind = T)[,1]),]
hp[unique(which(hp[,years2]<0,arr.ind = T)[,1]),]
hp[duplicated(hp[,c("RegionCode","ProductName")]),]
## 
hp <- hp[!duplicated(hp[,c("RegionCode","ProductName")]),]
###
pnii <- unique(pd[,c("Possession","ProductID")])
# hp <- hp[hp$CountryCode %in% c("CO"),] #
#countries and poss for these not making fakes
dont.make.fakes <- bt[bt$Issue=="dont.make.fakes",]
### Kodėl ne visi regionai yra tarp sumodeliuotų?? nes
### po antro veiksmo sumažėja duomenų
hpregion <- unique(hp[,c("RegionCode")])
hpregion <- intersect(hpregion,rposout$CityCode)
# hpregion <- hpregion[!hpregion$RegionCode %in% unique(hp$CountryCode),]
# prikabinimas product ID
rposout <- merge(rposout,possession_codes,by.x="Possession",by.y="ProductName",all.x=T)
rposout <- arrange(rposout,CityCode,Possession,CountryCode)
rposout[is.na(rposout$ProductID) & rposout$Possession=="Possession of Black and White TV Set","ProductID"]  <-  2496
#isorderinama, kad is pradziu prikabintu totalus, jei nera, o tik tada miestam uzvarytu
hpregion <- c(hpregion[hpregion %in% rposout$CountryCode],hpregion[!hpregion %in% rposout$CountryCode])
hp <- make.fakes(hpregion, hp, dont.make, possession_codes)
s8rposout <- rposout
# pasiliekame tik tuos istorinius duomenis, kuriuos esame primodeliavę.
hpregion <- unique(hp[,c("CountryCode","ProductName")])
hpregion <- hpregion[hpregion$CountryCode %in% rposout$CountryCode & hpregion$ProductName %in% rposout$Possession,]
hpregion <- arrange(hpregion,CountryCode)
levelhp <- hp
load("temp/s4rposout after conditions and original adjustion2016-06-06 08-54-08.RData")
s5.rposout <- rposout
# Exceptionu nuskaitymas, kad imtu kitoki pritempimo buda atitinkamai saliai x produktui
bt.other.method <- bt[bt$Issue=="originals.other.method",]
source("originals_othermethod.R")
rposout <- issue.smooth(bt, rposout)
rposout <- issue.stretch.f(bt, rposout)
rposout <- issue.total.ratio.f(bt, rposout)
################
# grafikai po pataisymu
graphs.Badthings.adjustion(bt, rposout, s5.rposout,
filename= "plots/6. Badthings adjustion/Badthings adjustion ")
# tikrinamame, ar pavertus absoliuciomis reiksmemis susumuoti miestu possession of durables nevirsija salies
hh <- read.csv(file="input/number of households 2015-11-23.csv",check.names = F,stringsAsFactors = F)
# bad.list <- list.cities.surpass.country(hh, rposout)
rposout <- fixing.cities.surpass.country(hh, rposout, plot=T)
###########################################################################
# testing conditions ------------------------------------------------------
###########################################################################
s6.rposout <- rposout
rposout <- test.all.conditions.cities(rposout,plot=F)
list.cities.surpass.country(hh, rposout) #turi buti tuscia jeigu ne reiktu kazka pergalvoti!!!!!!
###########################################################################
# Final Graphs ------------------------------------------------------------
###########################################################################
cities.possession.graphs.grubus(rposout,filename="plots/7. Forecasted possessions after exeptions/Forecasted possessions after exeptions ",
info1="Possessions of Durables",info2="Forecasts after exeptions and conditions check")
cities.possession.graphs.grubus.tik.miestai.split(rposout,splitmap,filename="plots/8. Forecasted possessions only cities mapping/Forecasted possessions only cities mapping ",
info1="Possessions of Durables",info2="Forecasts after exeptions and conditions cities splitted")
#  ------------------------------------------------------------------------
# final graphs ------------------------------------------------------------
#  ------------------------------------------------------------------------
bigdata <- rposout
cities.possession.graphs(bigdata)
# cities.possession.graphs.grubus(bigdata)
# output all ------------------------------------------------------------------
### pridedami 3 miestai, kuriu nebuvo anksciau, bet jie sutampa su salimi
BH01 <- add.cities.which.are.equal.to.countries(cc = "BH",citycode = "BH01",cityname = "Manama",pd,rposout)
KW01 <- add.cities.which.are.equal.to.countries(cc = "KW",citycode = "KW01",cityname = "Kuwait City",pd,rposout)
QT01 <- add.cities.which.are.equal.to.countries(cc = "QT",citycode = "QT01",cityname = "Doha",pd,rposout)
rposout <- rbind.fill(rposout,BH01,KW01,QT01)
rposout <- rposout[,c("CountryCode","CityCode","City","ProductID","Possession",years)]
outputname <- paste0("output/rposout final ",gsub(":","-",Sys.time()),".csv")
write.csv(rposout,file=outputname,row.names=F)
# cities output -----------------------------------------------------------
allrposout <- rposout
citiesposout <- rposout[rposout$CityCode %in% ccid$CityCode,]
citiesposout <- merge(citiesposout,ccid[,c("CityCode","CityCodeID")],all.x=T,by.x="CityCode",by.y="CityCode")
outputname <- paste0("output/cities output final ",gsub(":","-",Sys.time()),".csv")
write.csv(citiesposout,file=outputname,row.names=F)
citiesposoutoutput <- citiesposout
citiesposoutoutput <- citiesposoutoutput[,c("ProductID","CityCodeID",years)]
names(citiesposoutoutput) <- c("ProductID","CountryCodeID",paste0("Y",years))
outputname <- paste0("output/cities output with id final ",gsub(":","-",Sys.time()),".csv")
write.csv(citiesposoutoutput,file=outputname,row.names=F)
d.new <- read.csv("output/rposout final 2016-06-10 00-56-41.csv", stringsAsFactors=F)
d.old <- read.csv("input/PossData2016-05-03.csv", stringsAsFactors = F)
d.new <- melt(d.new, id=c("CityCode", "CountryCode", "City", "ProductID", "Possession", "CityCodeID"))
d.new <- rename(d.new, c(variable="Year", value="new", Possession="ProductName"))
d.new$Year <- sub("X", "", d.new$Year)
d.new$ProductName <- NULL
d.old <- d.old[,c("ProductID", "ProductName", "CityCode", paste0("Y", 2005:2030))]
d.old <- melt(d.old, id=c("ProductID", "ProductName", "CityCode"))
d.old$variable <- sub("Y", "", d.old$variable)
d.old <- rename(d.old, c(variable="Year", value="old"))
data <- merge(d.new, d.old, by=c("ProductID", "CityCode", "Year"))
data$diff.old.new <- abs((round(data$new,2)-round(data$old,2))/round(data$old,2)*100)
##output
data.out <- melt(data, id=c("ProductID", "CityCode", "Year", "CountryCode", "City",
"CityCodeID", "ProductName"))
data.out <- dcast(data.out, ProductID+CityCode+CountryCode+City+CityCodeID+ProductName+
variable~Year, value.var="value")
write.csv(data.out, paste0("output/Compare_old_and_new ", Sys.Date(), ".csv"), row.names = F)
#add totals (old and new) to data
load("input/Possessions by Decile/final_poss_by_decile RData/final_poss_by_decile 2016-06-03.RData")
tnew <- final.pbd
load("input/Possessions by Decile/final_poss_by_decile RData/final_poss_by_decile 2015-12-10.RData")
told <- final.pbd
tnew$pos <- "new"
told$pos <- "old"
tt <- rbind(tnew, told)
d.new <- read.csv("output/cities output final 2016-06-10 00-56-45.csv", stringsAsFactors=F)
d.old <- read.csv("input/PossData2016-05-03.csv", stringsAsFactors = F)
d.new <- melt(d.new, id=c("CityCode", "CountryCode", "City", "ProductID", "Possession", "CityCodeID"))
d.new <- rename(d.new, c(variable="Year", value="new", Possession="ProductName"))
d.new$Year <- sub("X", "", d.new$Year)
d.new$ProductName <- NULL
d.old <- d.old[,c("ProductID", "ProductName", "CityCode", paste0("Y", 2005:2030))]
d.old <- melt(d.old, id=c("ProductID", "ProductName", "CityCode"))
d.old$variable <- sub("Y", "", d.old$variable)
d.old <- rename(d.old, c(variable="Year", value="old"))
data <- merge(d.new, d.old, by=c("ProductID", "CityCode", "Year"))
data$diff.old.new <- abs((round(data$new,2)-round(data$old,2))/round(data$old,2)*100)
##output
data.out <- melt(data, id=c("ProductID", "CityCode", "Year", "CountryCode", "City",
"CityCodeID", "ProductName"))
data.out <- dcast(data.out, ProductID+CityCode+CountryCode+City+CityCodeID+ProductName+
variable~Year, value.var="value")
write.csv(data.out, paste0("output/Compare_old_and_new ", Sys.Date(), ".csv"), row.names = F)
#add totals (old and new) to data
load("input/Possessions by Decile/final_poss_by_decile RData/final_poss_by_decile 2016-06-03.RData")
tnew <- final.pbd
load("input/Possessions by Decile/final_poss_by_decile RData/final_poss_by_decile 2015-12-10.RData")
told <- final.pbd
tnew$pos <- "new"
told$pos <- "old"
tt <- rbind(tnew, told)
tt <- tt[,c("Year", "Decile.No", "CountryCode", "ProductID", "est.Pos.norm", "pos")]
tt <- ddply(tt, .(Year, CountryCode, ProductID, pos), summarise, t.poss=mean(est.Pos.norm))
tt <- dcast(tt, Year+CountryCode+ProductID~pos, value.var="t.poss")
tt <- rename(tt, c(new="t.new", old="t.old"))
data <- merge(data, tt, by=c("Year", "CountryCode", "ProductID"), all.x=T)
#duomenys,kurie pasikeite daugiau nei per 10proc
changes <- unique(data[data$diff.old.new>10,c("CityCode", "ProductID", "CountryCode", "ProductName", "City")])
changes$id <- paste0(changes$CityCode, changes$ProductID, changes$CountryCode,
changes$ProductName, changes$City)
data$id <- paste0(data$CityCode, data$ProductID, data$CountryCode,
data$ProductName, data$City)
data.diff10proc <- data[data$id %in% changes$id,]
data.diff10proc$id <- NULL
data$id <- NULL
##graphs
comparing.old.new.data(data, savedir = "plots/9. Comparing old and new/",
filename = "Comparing old and new poss ")
comparing.old.new.data(data.diff10proc, savedir = "plots/9. Comparing old and new/",
filename = "Comparing old and new poss diff 10proc ")
dev.off()
dev.off()
dev.off()
