{
    "collab_server" : "",
    "contents" : "\n# issue...originals.other.method ------------------------------------------\n  \n  for(index in 1:nrow(bt.other.method)){\n    \n    x <- bt.other.method[index,]\n    cc <- x$CountryCode[1]\n    pn <- x$ProductName[1]\n    city <- x$City[1]\n    \n    print(paste(cc,city,pn,sep=\" - \"))\n    \n    his <- hp[hp$CountryCode == cc & hp$ProductName== pn,]\n    his <- his[!duplicated(his[,1]),]\n    his <- his[!apply(his[,years2],1,function(x){all(is.na(x))}),] \n    \n    citylist <- c()\n    if(city==\"all\"){\n      citylist <- rposout[rposout$CountryCode==cc & rposout$Possession==pn,\"City\"]\n    } else {\n      citylist <- city\n    }\n    \n    xframe <- s8rposout[s8rposout$CountryCode==cc & s8rposout$Possession==pn,]\n    if(dim(xframe)[1]==0) next\n    if(dim(his)[1]==0) next\n    \n    oxframe <- xframe\n    \n    # priforecastinamas totalas\n    totalratio <- his[his$CountryName==\"Total\",years2]/xframe[xframe$City==\"Total\",years2]\n    if(sum(!is.na(totalratio))==1) totalratio <- rep(totalratio[!is.na(totalratio)],length(totalratio))\n    totalratio <- MASplineVector(totalratio)\n    his[his$CountryName==\"Total\",years2] <- xframe[xframe$City==\"Total\",years2] * totalratio\n    \n    # suskaiciuojami santykiai ir jie sukalami ant rposout\n    levelmat <- his\n    \n    \n    # #multi\n    # totaloriginal <- as.numeric(his[his$CountryName==\"Total\",years2])\n    # totaldatabase <- as.numeric(xframe[xframe$City==\"Total\",years2])\n    # levelmat[,years2] <- t(apply(levelmat[,years2],1,function(x){as.numeric(x)/totaloriginal * totaldatabase}))\n    \n    #adi\n    totaloriginal <- as.numeric(his[his$CountryName==\"Total\",years2])\n    totaldatabase <- as.numeric(xframe[xframe$City==\"Total\",years2])\n    levelmat[,years2] <- t(apply(levelmat[,years2],1,function(x){as.numeric(x)-totaloriginal + totaldatabase}))\n    \n    levelmat[,years2][levelmat[,years2] < 0 & !is.na(levelmat[,years2] < 0)] <- \n      min(levelmat[,years2][levelmat[,years2] > 0 & !is.na(levelmat[,years2] < 0)])\n    \n    #   levelhp[levelhp$CountryCode == cc & levelhp$ProductName== pn,years2] <- levelmat[,years2]\n    \n    \n    # ███████████████████████ pridedami fiktyvus originalus\n    \n    miss <- intersect(setdiff(xframe$CityCode,levelmat$RegionCode),tier$RegionCode)\n    \n    out <- c()\n    #missing regions adjustion\n    if(length(miss)!=0){ \n      for(mr in miss){\n        print(paste(\"Missing Region:\",mr))\n        \n        mc <- tier[tier$RegionCode == mr,\"CityCode\"]\n        out <- levelmat[levelmat$CountryName==\"Total\",]\n        out$RegionCode <- mr\n        out[,c(\"Region/CityName\")] <- NA\n        out[,c(\"CountryName\")] <- \"Temp\"\n        \n        if(any(mc %in% unique(levelmat$RegionCode))){\n          out[,years2] <- as.numeric(apply(levelmat[levelmat$RegionCode %in% c(mc,cc),years2],2,mean))\n          levelmat <- rbind(levelmat,out)\n          \n        } else next\n        \n        print(out)\n        \n      }\n    }\n    \n    # pridedami fiktyvus originalus miestam, jei turim regionus\n    \n    setdiff(xframe$CityCode,levelmat$RegionCode)\n    \n    regs <- intersect(intersect(xframe$CityCode,tier$RegionCode),levelmat$RegionCode)\n    \n    for(rr in regs){\n      \n      cinr <- tier[tier$RegionCode == rr,\"CityCode\"]\n      cinr <- intersect(cinr[!cinr %in% unique(levelmat$RegionCode)],xframe$CityCode)\n      \n      if(length(cinr)!= 0){\n        for(i in 1:length(cinr)){\n          print(paste(\"City changed because of Region: \", cinr[i],\"because of\",rr))\n          x <- oxframe[oxframe$CityCode==cinr[i],years]\n          xreg <- oxframe[oxframe$CityCode==rr,years]\n          ratio <- x[,years]/xreg\n          #         x <-  xframe[xframe$CityCode==rr,years] * ratio\n          #         xframe[xframe$CityCode==cinr[i],years]  <- x\n          out <- levelmat[levelmat$RegionCode==rr,]\n          out$RegionCode <- cinr[i]\n          out[,years2] <- out[,years2] * ratio[,years2]\n          levelmat <- rbind(levelmat,out)\n        }\n      }\n    }\n    \n    levelmat[,years2][levelmat[,years2]>100] <- 100\n    \n    \n    \n    p <- xframe[xframe$City==\"Total\",years]/100\n    #███\n    citymustbetchanged <- intersect(unique(levelmat$RegionCode)[unique(levelmat$RegionCode)!=cc],xframe$CityCode)\n    citylistcodes <- xframe[xframe$City %in% citylist,\"CityCode\"]\n    citymustbetchanged <- intersect(citymustbetchanged,citylistcodes)\n    \n    if(length(citymustbetchanged)==0) print(\"ALARM ALARM THERE IS NO CITY WITH THAT NAME\")\n    \n    for(mcc in citymustbetchanged){\n      \n      x <- xframe[xframe$CityCode==mcc,]\n      if(dim(x)[1]==0) next\n      y <- levelmat[levelmat$RegionCode==mcc,]\n      nnay <- years2[which(!is.na(y[,years2]))]\n      ymean <- mean(as.numeric(y[,nnay]))\n      xmean <- mean(as.numeric(x[,nnay]))\n      \n      \n      #     if(dim(bt.other.method[bt.other.method$CountryCode==cc & bt.other.method$ProductName==pn,])[1]>0){\n      ### \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n      \n      cat(paste(\"Other originals adjustion method used:\",mcc),\"\\n\")  \n      \n      nnay <- floor((as.numeric(nnay[1]) + as.numeric(nnay[length(nnay)]))/2)\n      kofori <- kof[kof$CityCode==mcc,]\n      kofcn <- kof[kof$CityCode==cc,]\n      \n      koforiini <- as.numeric(kofori[kofori$Year==nnay,c(\"a\",\"b.cntUSD\",\"q\")])\n      pmat <- pd[pd$CountryCode==cc & pd$Possession==pn,] \n      pframe <- pmat[pmat$Year==nnay,c(\"est.Pos.norm\",\"Average.income\")] \n      \n      b.pre <- koforiini[2]\n      koforiini[2] <- posfun.reverse(ymean)\n      \n      if(koforiini[2]<0) koforiini[2] <- min(pframe[,2])\n      \n      \n      if(any(is.na(koforiini))) next\n      \n      minifun <- function(b){\n        #       print(b)\n        if(b<0) out <- 10^200 else {\n          theta <- data.frame(matrix(c(koforiini[1],b,koforiini[3]),nrow=1))\n          names(theta) <- c(\"a\",\"b.cntUSD\",\"q\")\n          out <- (regionalpos(theta,pframe,plot=F,starter = tail(pframe$Average.income,1) * 20) - ymean)^2\n        }\n        return(out)\n      }\n      \n      # aaaa <- Sys.time()\n      fitb <- optim(koforiini[2],fn = minifun,control = list(maxit=10,trace=0,REPORT=2),\n                    method=\"L-BFGS-B\")$par\n      # Sys.time() - aaaa   \n      \n      ratio <- b.pre/fitb\n      \n      koforinew <- kofori\n      koforinew$b.cntUSD <- koforinew$b.cntUSD/ratio\n      \n      #   print(paste0(mcc,\"   \",fitb))\n      out <- c()\n      for(y in 2005:2030){\n        #       print(y)\n        k <- koforinew[koforinew$Year==y,]\n        pframe <- pmat[pmat$Year==y,]\n        out[y-2004] <- regionalpos(k,pframe,plot=F,starter = tail(pframe$Average.income,1) * 20)\n      }\n      \n      x.out <- out\n      \n      tot <- as.numeric(xframe[xframe$CityCode==cc,years])\n      \n      if(all(diff(tot)<=0) | all(diff(tot)>=0)){\n        x.out <- mono.pos(x.out,tot,split = 1)\n      }\n      \n      x[,years] <- x.out\n      \n      xframe[xframe$CityCode==mcc,] <- x\n      \n    }\n    \n    # pramusimas over100.v2\n    xframe[,years] <- over100.v2(xframe[,years],plot=F,divover=2,border = 1)\n    #   xframe[,years] <- over100.v2(xframe[,years],plot=F,divover=2,border = 1)\n    \n    #   if(dim(xframe)[1]==0) next\n    \n    ####################################\n    \n    #   xframe[,years] <- over100.v2(xframe[,years],plot=F,divover=2,border = 1)\n    \n    #   notchanged <- setdiff(xframe$CityCode[which(apply(oxframe[,years] - xframe[,years],1,mean) == 0)],c(cc,\"Total\"))\n    #   if(length(notchanged)!=0) print(paste(\"There left few 'CityCodes' which was not changed or was equal (strange):\",notchanged))\n    \n    #███\n    rposout[rposout$CountryCode==cc & rposout$Possession==pn & rposout$City%in% citylist,] <- xframe[xframe$City%in% citylist,]\n    #███\n    \n    \n  }\n  \n\n# manipulation ------------------------------------------------------------\n\nbl <- c()\n\nmanipulate.fun <- function(rposout){\n  \n  require(manipulate)\n  \n  manipulate({\n    # print(\"Check\")\n    xframe <- rposout[rposout$CountryCode==cc & rposout$Possession==pn,]\n    \n    if(dim(xframe)[1]==0) print(\"There is NO such Country x Possession\") else {\n      \n      xframe.print <- data.frame(t(xframe[,years]))\n      names(xframe.print) <- xframe$City\n      \n      matplotf(xframe.print,main=paste(cc,pn,sep=\" - \"),legend=F,point=p,abline=c(minabline,maxabline),text=text)\n      if(total) lines(xframe.print[,\"Total\"],lwd=2)\n      \n      if(add) {print(paste0(\"Added to Bad List: \",cc,\" - \",pn))\n        bl <<- rbind(bl,c(cc,pn))\n      }\n    }\n  },\n  \n  cc = picker(as.list(unique(rposout$CountryCode)),label = \"Country Code\"),\n  pn = picker(as.list(unique(rposout$Possession)),label = \"Possession\"),\n  p = checkbox(F, \"Points\"),\n  text = checkbox(F, \"Text\"),\n  total = checkbox(F, \"Total Line\"),\n  minabline = slider(min = 0,max=100,initial = 0,step = 1),\n  maxabline = slider(min = 0,max=100,initial = 100,step = 1),\n  add = button(\"Add to Bad List\")\n  )\n  \n}\n\n\n\nmanipulate(\nplot(cars, xlim=c(x.min,x.max),axes=axes.menu), \n  x.min=slider(0,15), \n  x.max=slider(15,30),\naxes.menu = checkbox(F,\"Axes\"))\n\n\n\n",
    "created" : 1463931718865.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2282837166",
    "id" : "2E22D996",
    "lastKnownWriteTime" : 1463642046,
    "last_content_update" : 1463642046,
    "path" : "C:/Users/Domantas/Desktop/justes/PossessionRates/originals_othermethod.R",
    "project_path" : "originals_othermethod.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}