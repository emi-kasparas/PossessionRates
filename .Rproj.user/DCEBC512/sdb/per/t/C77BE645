{
    "collab_server" : "",
    "contents" : "library(ggplot2)\nlibrary(reshape2)\nlibrary(forecast)\nlibrary(urca)\nlibrary(plyr)\nlibrary(TSA)\nlibrary(gridExtra)\nlibrary(TTR)\nlibrary(manipulate)\n\n######################################\n\nspalva=\"dodgerblue4\"\ncol1=\"#FAA537\"\ncol2=\"#5F88A1\"\ncol3=\"#57854E\"\ncolt=\"white\"\ncol4=\"steelblue4\"\nec = c(\"#8B6F66\",\"#7C6D96\",\"#0078BF\",\"#206779\",\"#57854E\",\"#FDCF41\",\"#E07A3F\",\"#BD4F5C\")\n\n######################################\n\n\n\npress=function(x,str,plot=F){\n  \n  oldx=x\n  \n  xform=x/mean(x)-1\n  xform=xform/str\n  \n  x=(xform+1)*mean(x)\n  \n  if(plot==T){\n    matplot(cbind(oldx,x),lty=1,pch=20,type=\"l\",main=paste(\"Sqeezing strength:\",str,sep=\" \"),ylab=\"\")\n    points(oldx,pch=20)\n    points(x,pch=20,col=2)\n  }\n  \n  return(x)\n}\n\n\nlevel=function(x,lvl,plot=F){\n  \n  oldx=x\n  olvl=mean(oldx)\n  \n  xform=x/mean(x)\n  x=xform*lvl\n  \n  if(plot==T){\n    matplot(cbind(oldx,x),lty=1,pch=20,type=\"l\",main=paste(\"Old lvl\",round(olvl,2),\">>> New lvl\",lvl,sep=\" \"),ylab=\"\")\n    points(oldx,pch=20)\n    points(x,pch=20,col=2)\n  }\n  \n  return(x)\n}\n\n\nsm=function(x,df=6,plot=F){\n  \n  oldx=x\n  \n  x=smooth.spline(x, df=df)$y\n  \n  if(plot==T){\n    matplot(cbind(oldx,x),lty=1,pch=20,type=\"l\",main=paste(\"Smoothing strength:\",df,sep=\" \"),ylab=\"\")\n    points(oldx,pch=20)\n    points(x,pch=20,col=2)\n  }\n  \n  return(x)\n}\n\n# ff=lininterpol(cps.eval,dfor)\n# \n# x=cps.eval\n# xframe=dfor\n\nlininterpol=function(x,xframe){\n  x=as.numeric(unlist(x))\n  outx=c()\n  \n  for(k in 1:length(x)){\n    \n    minnr=max(which(x[k]>=xframe[,2]))\n    maxnr=min(which(x[k]<=xframe[,2]))\n    \n    if(maxnr==Inf)maxnr=minnr\n    \n    s1=as.numeric(xframe[minnr,2])\n    s2=as.numeric(xframe[maxnr,2])\n    \n    ratio=(x[k]-s1)/(s2-s1)\n    if(is.na(ratio)) ratio=1\n    if(ratio==Inf) ratio=1\n    \n    outx[k]=ratio*(xframe[maxnr,1]-xframe[minnr,1])+xframe[minnr,1]\n  }\n  return(outx)\n}\n\n\n\nover100=function(xframe){\n  \n  xframe=apply(xframe,2,function(x){\n    on=c()\n    while(any(x>100)){\n      \n      on=unique(c(on,which(x>100)))\n      over=sum(x[on]-100)\n      x[on]=100\n      x[-on]=x[-on]+over/length(x[-on])\n      \n    }\n    return(x)}) \n  \n  return(xframe)\n}\n\n\ncritbound=function(x,crit=1.5){\n  (100/x)^(1/crit)/100\n  (1/x)^(1/crit)/2\n  \n}\n\n\ncritbound=function(x,crit=3){\n  kritai=seq(4,crit,length.out=100)\n  xsai=seq(1,100,by=1)\n  \n  minnr=max(which(x>=xsai))\n  smash=kritai[minnr]\n  \n  1/x/smash\n}\n\n\npos=function(x){\n  out=F\n  pos=sum(diff(x)>=0)\n  neg=sum(diff(x)<0)\n  \n  if(pos>=neg)out=T\n  return(out)\n}\n\n\n\n# iternorm ----------------------------------------------------------------\n# iteratyviam normavimui parasyta funkcija\n\niternorm=function(matout,ttn,plottest=F,plottest2=T){\n  \n  omatout=matout\n  \n  if(plottest){\n    matplot(t(matout),type=\"l\",lty=1)\n    matplot(apply(matout,2,function(x)x/sum(x)),type=\"l\",lty=1)\n  }\n  \n  shemat=t(apply(matout,2,function(x)x/sum(x)))\n  shematd=apply(shemat,2,function(x)x[2:26]/x[1:25])\n  \n  protype=(shematd*ttn[2:26]/ttn[1:25])\n  opr=protype\n  \n  if(plottest){\n    matplot(protype,type=\"l\",main=\"Starting point\",lty=1)\n    abline(h=1,col=4,lty=2,lwd=1)\n    #     matplot(shemat,type=\"l\",main=\"Starting point\",lty=1)\n    #     abline(h=1,col=4,lty=2,lwd=1)\n    \n  }\n  \n  \n  \n  totsign=sign(diff(ttn))\n  \n  testos=c()\n  for(k in 1:25){ \n    sg=totsign[k]\n    if(sg==1 | sg==0){\n      if(all(protype[k,]>=1)) testos[k]=T else testos[k]=F\n    }\n    \n    if(sg==-1){\n      if(all(protype[k,]<1)) testos[k]=T else testos[k]=F\n    }\n  }\n  \n  \n  \n  iter=1\n  while(!all(testos)){\n    #     while(any(protype<1)){\n    \n    les=(1:25)[!testos]\n    \n    for(j in les){\n      \n      x1=shemat[j,]\n      x2=shemat[j+1,]\n      \n      or= x2/x1*ttn[j+1]/ttn[j]\n      r=or\n      i=1\n      t=seq(0,1,by=0.01)\n      combo=x2\n      \n      #       print(j)\n      \n      TTT=F\n      if(totsign[j]>=0){if(any(r<1)) TTT=T}\n      if(totsign[j]<0){if(any(r>1)) TTT=T}\n      \n      while(TTT){\n        \n        #     cat(t[i],\"\\n\")\n        \n        combo=x1*t[i] + x2 * (1-t[i])\n        \n        r=combo/x1*ttn[j+1]/ttn[j]\n        \n        TTT=F\n        if(totsign[j]>=0){if(any(r<1)) TTT=T}\n        if(totsign[j]<0){if(any(r>1)) TTT=T}\n        \n        #         plot(r,ylim=range(or),type=\"l\",main=paste(\"Iteration\",as.character(i-1)),\n        #              xlab=paste(\"lambda=\",t[i]))\n        #         abline(h=1,col=4,lty=2)\n        if(i>length(t))  {cat(\"NEPAVYKO SUKONVERGUOTI ITERATYVIAI\",\"\\n\"); break}\n        i=i+1\n      }\n      \n      shemat[j+1,]=combo\n    }\n    \n    shematd=apply(shemat,2,function(x)x[2:26]/x[1:25])\n    \n    protype=(shematd*ttn[2:26]/ttn[1:25])\n    \n    if(plottest){\n      matplot(protype,type=\"l\",main=paste(\"Iteration\",as.character(iter)),lty=1,ylim=range(opr))\n      abline(h=1,col=4,lty=2,lwd=1)\n    }\n    \n    testos=c()\n    for(k in 1:25){ \n      sg=totsign[k]\n      if(sg==1 | sg==0){\n        if(all(protype[k,]>=1)) testos[k]=T else testos[k]=F\n      }\n      \n      if(sg==-1){\n        if(all(protype[k,]<1)) testos[k]=T else testos[k]=F\n      }\n    }\n    \n    iter=iter+1\n  }\n  \n  \n  matoutre=shemat\n  for(i in 1:26){\n    matoutre[i,]=shemat[i,]*ttn[i]*10\n  }\n  \n  matoutre=t(matoutre)\n  \n  if(plottest2){  \n    par(mfrow=c(2,2))\n    matplot(t(normal.normal(matout,ttn)),type=\"l\",lty=1,main=\"BEFORE (NORMAL.NORMAL)\",xlab=\"Year\",ylab=\"% device in use\")\n    lines(ttn,col=\"firebrick3\",lwd=1.5,pch=8,type=\"o\")\n    matplot(t(matoutre),type=\"l\",lty=1,main=\"AFTER\",\n            ylab=paste(\"Iterations Nr.\",as.character(iter-1)),xlab=\"Year\")\n    lines(ttn,col=\"firebrick3\",lwd=1.5,pch=8,type=\"o\")\n    \n    matplot(normal.normal(matout,ttn),type=\"l\",lty=1,main=\"BEFORE\",xlab=\"Decile\",ylab=\"% device in use\")\n    matplot(matoutre,type=\"l\",lty=1,main=\"AFTER\",\n            ylab=paste(\"Iterations Nr.\",as.character(iter-1)),xlab=\"Decile\")\n    par(mfrow=c(1,1))\n  }\n  \n  return(matoutre)\n}\n\n\n# monotonic ---------------------------------------------------------------\n# >= \n\nmonotonic=function(matout,ttn){\n  \n  pos=which(diff(ttn)>=0)\n  neg=which(diff(ttn)<0)\n  \n  out=matout\n  for(i in 1:10){\n    x=as.numeric(out[i,])\n    for(j in pos[pos!=1]){\n      if(x[j]<x[j-1]) x[j]=x[j-1]\n    }\n    out[i,]=x\n  }\n  \n  for(i in 1:10){\n    x=as.numeric(out[i,])\n    for(j in neg[neg!=1]){\n      if(x[j]>x[j-1]) x[j]=x[j-1]\n    }\n    out[i,]=x\n  }\n  \n  \n  return(out) \n}\n\n# matplot(t(matout),type=\"o\",pch=20)\n# matplot(t(monotonic(matout,ttn)),type=\"l\")\n\n\nmonotonic.income=function(yframe){\n  \n  out=yframe\n  for(i in 1:10){\n    x=as.numeric(out[i,])\n    for(j in 2:dim(yframe)[2]){\n      if(!is.na(x[j])){\n        if(x[j]<x[j-1]) x[j]=x[j-1]\n      }\n    }\n    out[i,]=x\n  }\n  \n  return(out) \n}\n\n\n# mv  := monotonic vector\nmv <- function(x,way=\"auto\",split=0){\n  \n  x <- as.numeric(unlist(x))\n  ox <- x\n  \n  #auto\n  if(way ==\"auto\"){\n    if(sum(diff(x)>0)>=sum(diff(x)<0)) way  <- \"up\" else way <- \"down\"\n    #     print(paste(\"Method AUTO used:\",\"the way ->\",way,\"<- chosen\"))\n  }\n  \n  #up\n  if(way == \"up\"){\n    for(i in 2:length(x)){\n      if(x[i]<x[i-1]) x[i] <- x[i-1]\n    }\n    \n    bad <- which(x > ox)\n    bad <- sort(unique(c(bad,bad+split)))\n    bad <- setdiff(bad,length(x)+1:(split+1))\n    x[bad] <- NA\n    \n    if(is.na(x[length(x)])){\n      x[length(x)] <- x[max(which(!is.na(x)))] \n    }\n  }\n  \n  #down\n  if(way == \"down\"){\n    for(i in 2:length(x)){\n      if(x[i]>x[i-1]) x[i] <- x[i-1]\n    }\n    \n    bad <- which(x < ox)\n    bad <- sort(unique(c(bad,bad+split)))\n    bad <- setdiff(bad,length(x)+1:(split+1))\n    x[bad] <- NA\n    \n    if(is.na(x[length(x)])){\n      x[length(x)] <- x[max(which(!is.na(x)))] \n    }\n  }\n  \n  x <- MASplineVector(x)\n  \n  return(x) \n}\n\n# nutemptas total ---------------------------------------------------------\n\nnutemptas.total=function(matout,tt){\n  \n  for(y in 2005:2030){\n    ff=matout[y-2004]\n    ff=ff*as.numeric(tt[as.character(y)])/mean(as.numeric(unlist(ff)))\n    matout[y-2004]=ff\n  }\n  \n  \n  kryptis=apply(matout,1,function(x){\n    min(which(diff(as.numeric(x))<0))-1\n  })\n  stablenr=min(kryptis[kryptis>5])\n  if(stablenr==Inf)stablenr=2\n  \n  \n  for(y in (2005+stablenr):2030){\n    ff=matout[2005+stablenr-2004-1]\n    ff=ff*as.numeric(tt[as.character(y)])/mean(as.numeric(unlist(ff)))\n    matout[y-2004]=ff\n  }\n  \n  matout[stablenr]=matout[(stablenr-1)]*0.5+matout[(stablenr+1)]*0.5\n  matout[stablenr]=matout[stablenr]*as.numeric(tt[as.character(stablenr+2005-1)])/\n    mean(as.numeric(unlist(matout[stablenr])))\n  \n  return(matout)\n}\n\n# nutemptas total ---------------------------------------------------------\n\nnutemptas.total.brutal=function(matout,tt){\n  \n  matout[c(1:4,6:26)]=matout[,5]\n  \n  for(y in 2005:2030){\n    ff=matout[y-2004]\n    ff=ff*as.numeric(tt[as.character(y)])/mean(as.numeric(unlist(ff)))\n    matout[y-2004]=ff\n  }\n  \n  return(matout)\n}\n\n# normal.normal ---------------------------------------------------------\n\nnormal.normal=function(matout,ttn){\n  \n  for(i in 1:26){\n    matout[,i]=level(matout[,i],lvl=ttn[i],plot=F)\n  }\n  \n  return(matout)\n}\n\n# smooth.mat ---------------------------------------------------------\n\nsmooth.mat=function(matout,df){\n  \n  for(i in 1:10){\n    matout[i,]=sm(as.numeric(matout[i,]),df=df,plot=F)\n  }\n  \n  return(matout)\n}\n\n# fordec ------------------------------------------------------------------\n# function, which counts everything, what you need (well, only all possesions)\n\n\nfordec=function(xhist,yhist,yframe,totline,plottest=F,plottest3=F,xframe){\n  \n  d=data.frame(cbind(y=yhist,x=xhist))\n  ld=d\n  \n  model.np <- npreg(x ~ y ,regtype = \"lc\",\n                    gradients = TRUE,\n                    data = d,ckertype=\"gaussian\",ckerorder=2)\n  #       model.np2 <- npreg(x ~ y ,regtype = \"ll\",\n  #                          gradients = TRUE,\n  #                          data = d,ckertype=\"gaussian\",ckerorder=2)\n  if(plottest){  \n    plot(model.np)\n    points(d,col=4,pch=20)\n  }\n  #       plot(model.np2)\n  \n  plot(yframe[,1],xframe[,1],xlim=range(yframe),ylim=range(xframe),pch=20)\n  points(yframe[,2],xframe[,2],xlim=range(yframe),ylim=range(xframe),col=2,pch=20)\n  points(yframe[,3],xframe[,3],xlim=range(yframe),ylim=range(xframe),col=3,pch=20)\n  points(yframe[,4],xframe[,4],xlim=range(yframe),ylim=range(xframe),col=4,pch=20)\n  points(yframe[,5],xframe[,5],xlim=range(yframe),ylim=range(xframe),col=i,pch=20)\n  \n  \n  \n  \n  \n  \n  \n  \n  # cps.eval=data.frame(y=seq(min(d$y),max(d$y),by=100))\n  cps.eval=data.frame(y=seq(min(d$y),max(d[-10,]$y),by=100))\n  foremaster=predict(model.np, newdata = cps.eval)\n  #   foremaster=sm(foremaster,df=8,plot=T)\n  \n  \n  \n  models=list()\n  \n  models[[1]]=try(nls(x ~ SSlogis(y, alpha, xmid, scale),data = ld),silent=T)\n  models[[2]]=try(nls(x ~ SSweibull(y,Asym,Drop,lrc,pwr),data = ld),silent=T)\n  models[[3]]=try(nls(x ~ SSasympOff(y, Asym, lrc, c0),data = ld),silent=T)\n  models[[4]]=try(nls(x ~ SSasympOrig(y, Asym, lrc),data = ld),silent=T)\n  models[[5]]=try(nls(x ~ SSbiexp(y, A1, lrc1, A2, lrc2),data = ld),silent=T)\n  models[[6]]=try(nls(x ~ SSfpl(y, A, B, xmid, scal),data = ld),silent=T)\n  models[[7]]=try(nls(x ~ SSgompertz(y, Asym, b2, b3),data = ld),silent=T)\n  models[[8]]=try(nls(x ~ SSmicmen(y, Vm, K),data = ld),silent=T)\n  models[[9]]=try(nls(x ~ SSasymp(y, Asym, R0, lrc),data = ld),silent=T)\n  \n  names(models)=c(\"SSlogis\",\"SSweibull\",\"SSasympOff\",\"SSasympOrig\",\n                  \"SSbiexp\",\"SSfpl\",\"SSgompertz\",\"SSmicmen\",\"SSasymp\")\n  \n  \n  alo=data.frame(y=seq(min(yframe,na.rm=T),max(yframe,na.rm=T),by=100))\n  \n  fitmat=data.frame(matrix(ncol=9,nrow=dim(alo)[1]))\n  for(i in 1:9){\n    if(class(models[[i]])==\"nls\") \n      fitmat[,i]=predict(models[[i]],newdata=alo)\n    \n  }\n  \n  ne=c(1:9)[apply(fitmat,2,function(x){all(!is.na(x))})]\n  plot(model.np,lwd=2)\n  \n  plot(ld,xlim=range(yframe,na.rm=T),col=4,pch=20,ylim=range(fitmat,na.rm=T))\n  for(i in ne){\n    lines(as.numeric(unlist(alo)),fitmat[,i],col=i)  \n  }\n  legend(\"bottomright\", names(models)[ne],col=ne,lty=1)\n  \n  \n  mapes=c()\n  for(j in 1:length(ne)){\n    i=ne[j]\n    mapes[j]=mean(abs(ld$x-predict(models[[i]]))/ld$x)*100   \n  }\n  names(mapes)=as.character(ne)\n  best=as.numeric(names(mapes[which(mapes==min(mapes))]))\n  \n  plot(ld,xlim=range(yframe,na.rm=T),col=4,pch=20,ylim=range(fitmat,na.rm=T),main=names(models)[best])\n  lines(as.numeric(unlist(alo)),fitmat[,best],col=best)  \n  \n  bestfit=as.numeric(fitmat[,best])\n  \n  \n  # jei nesuranda jokio gero modelio, reik kazka daryt:\n  if(sd(bestfit)/mean(bestfit)>5 | any(bestfit<(-10)) | any(bestfit>180)){\n    cat(\"NEI VIENAS IS S KREIVES MODELIU NETINKA!\",\"\\n\")\n  }\n  \n  \n  \n  dd=d\n  d=d[-10,]\n  \n  p1y=c(seq(min(yframe,na.rm=T),min(d$y),by=100),min(d$y)+100)\n  p2y=c(max(d$y)-100,seq(max(d$y),max(yframe,na.rm=T),by=100))\n  \n  p1fit=predict(models[[best]],newdata=data.frame(y=p1y))\n  p2fit=predict(models[[best]],newdata=data.frame(y=p2y))\n  \n  r1=p1fit[2:length(p1fit)]/p1fit[1:(length(p1fit)-1)]\n  r2=p2fit[2:length(p2fit)]/p2fit[1:(length(p2fit)-1)]\n  \n  p1fitf=1/rev(cumprod(rev(r1)))*foremaster[1]\n  p2fitf=cumprod(r2)*foremaster[length(foremaster)]\n  \n  miss=c(p1fitf,foremaster,p2fitf)\n  \n  dfor=cbind(x=miss,y=c(p1y[-length(p1y)],seq(min(d$y),max(d$y),by=100),p2y[-1]))\n  \n  if(plottest)plot(dfor[,2],dfor[,1],type=\"l\")\n  points(ld,col=4,pch=20)\n  \n  yframe=monotonic.income(yframe)\n  \n  matout=data.frame(matrix(NA,nrow=10,ncol=2030-2005+1))\n  \n  for(y in 2005:2030){\n    cps.eval <- data.frame(y=yframe[as.character(y)])\n    ff=lininterpol(cps.eval,dfor)\n    matout[y-2004]=ff   \n  }\n  \n  tempmatout=matout\n  # normavimas --------------------------------------------------------------\n  \n  ttn=as.numeric(tt)\n  \n  #   matout=monotonic(matout,ttn)\n  matout=iternorm(matout,ttn,plottest=T)\n  \n  qwe=nutemptas.total.brutal(tempmatout,tt)\n  #   matplot(t(data.frame(over100(qwe))),type=\"o\",lty=1,pch=20,cex=0.8,main=\"NUTEMPTAS TOTAL\")\n  \n  matout=data.frame(over100(matout))\n  \n  \n  par(mfrow=c(1,1))\n  \n  if(plottest){\n    matplot(matout,type=\"o\",lty=1,pch=20,cex=1)\n    matplot(t(matout),type=\"o\",lty=1,pch=20,cex=0.8)\n    lines(as.numeric(apply(matout,2,mean)),col=\"firebrick3\",lwd=1.5,pch=8,type=\"o\")\n  }\n  \n  \n  \n  if(plottest3){\n    matplot(t(data.frame(over100(qwe))),type=\"o\",lty=1,pch=20,cex=0.8,main=\"NUTEMPTAS TOTAL\",ylim=range(matout))\n    lines(ttn,col=\"firebrick3\",lwd=1.5,pch=8,type=\"o\")\n    matplot(t(matout),type=\"o\",lty=1,pch=20,cex=0.8,ylim=range(matout),main=\"Final (normalus metodas)\")\n    lines(ttn,col=\"firebrick3\",lwd=1.5,pch=8,type=\"o\")\n    \n  }\n  \n  matout=as.data.frame(matout)\n  names(matout)=as.character(2005:2030)\n  return(matout)\n}\n\nemibase=function(){\n  cat(\"Loading EMI base package ...\",\"\\n\")\n  load(\"K:\\\\GMID Research\\\\SM-route\\\\EMI base\\\\EMI base.Rdata\",envir = .GlobalEnv)\n  cat(\"Succesfully loaded\",\"\\n\")\n}\n\n\n\ntitlepage <- function(title,sub=\"\",sizes=15,date=Sys.time(),cola=\"skyblue4\",author=\"\"){\n  \n  df <- data.frame()\n  \n  \n  ggplot(df)+theme_bw()+\n    geom_rect(aes(xmin = -5, xmax = 5 , ymin = -0, ymax = 5),fill=cola)+\n    geom_text(aes( x = -4.75, y = 0.25*11/8),\n              hjust=0, vjust=0,\n              label = title,\n              size = sizes, colour = \"white\",fontface=1,family=\"AvantGarde\")+\n    geom_text(aes( x = 4.75, y = -4),\n              hjust=1, vjust=1.2,\n              label = date,\n              size = sizes/2, colour = cola,fontface=1,family=\"AvantGarde\")+\n    geom_text(aes( x = 4.75, y = -4),\n              hjust=1, vjust=-0.2,\n              label = author,\n              size = sizes/2, colour = cola,fontface=1,family=\"AvantGarde\")+\n    geom_text(aes( x = -4.75, y = -0.25*11/8),\n              hjust=0, vjust=1,\n              label = sub,\n              size = sizes/1.5, colour = cola,fontface=1,family=\"AvantGarde\")+\n    scale_y_continuous(limits=c(-5, 5),expand=c(0,0))+\n    scale_x_continuous(limits=c(-5, 5),expand=c(0,0))+\n    theme(axis.ticks = element_blank(),\n          axis.text = element_blank(),\n          panel.grid = element_blank(), \n          axis.title=element_blank(),\n          panel.border = element_blank(),\n          plot.margin= unit(c(-0.25,-0.25,-5.25,-5.25),\"mm\"))\n}\n\n\nthief <- function(x,c=3,plot=F,ratio=F,critvalue=0.05,abscritvalue = 0){\n  \n  dx <- diff(x)\n  if(ratio) dx <- x[2:length(x)]/x[1:(length(x)-1)] - 1\n  \n  ranges <- c(mean(dx,na.rm=T) - c * sd(dx,na.rm=T),mean(dx,na.rm=T) + c * sd(dx,na.rm=T))\n  if(plot) plotg(dx,abline=ranges)\n  \n  out <- F\n  \n  if((any( dx < ranges[1] | dx > ranges[2], na.rm=T )) & \n       max(abs(dx),na.rm=T)/mean(x,na.rm=T) >= critvalue & \n       mean(x,na.rm=T) >= abscritvalue) out <- T\n  return(out)\n  \n}\n\n\nthiefnr <- function(x,c=3,plot=F,ratio=F){\n  \n  dx <- diff(x)\n  if(ratio) dx <- x[2:length(x)]/x[1:(length(x)-1)] - 1\n  \n  ranges <- c(mean(dx,na.rm=T) - c * sd(dx,na.rm=T),mean(dx,na.rm=T) + c * sd(dx,na.rm=T))\n  if(plot) plotg(dx,abline=ranges)\n  \n  out <- which( dx < ranges[1] | dx > ranges[2]) + 1\n  return(out)\n  \n}\n\n\n\nrankg2 <- function(xframe,main=\"\",ran=NULL,outgr=F){\n  \n  nn <- names(xframe)[1]\n  names(xframe)[1] <- \"Object\"\n  mxframe <- melt(xframe,id.vars=names(xframe)[1])\n  mxframe <- ddply(mxframe,~variable,function(x){\n    cbind(x,Place = length(x$value) - rank(x$value) + 1)\n  })\n  \n  if(is.null(ran)) ran <- range(xframe[,2:3])\n  g <- ggplot(mxframe,aes(x=variable,y=Place,col=Object,group=Object)) + geom_line(size=rel(1)) + \n    theme_bw() + theme_pb() + scale_colour_emi(name=nn) + ggtitle(main)  +\n    scale_size_continuous(limits=ran) + geom_point(aes(label=Object,size=value)) + \n    geom_text(aes(label=Object),colour=\"grey60\",vjust=1.5) +\n    scale_y_reverse(breaks=1:dim(xframe)[1]) + \n    theme(panel.grid.minor = element_blank())\n  \n  if(outgr) return(g) else  print(g)\n  \n}\n\n\nrankg <- function(xframe,main=\"\",ran=NULL,outgr=F){\n  \n  nn <- names(xframe)[1]\n  names(xframe)[1] <- \"Object\"\n  xframe <- cbind(xframe,rank1 = length(xframe[,2]) - rank(xframe[,2]) + 1,\n                  rank2 = length(xframe[,3]) - rank(xframe[,3]) + 1,mean = apply(xframe[,2:3],1,mean))\n  \n  \n  if(is.null(ran)) ran <- range(xframe[,2:3])\n  g <- ggplot(xframe,aes(x=rank1,y=rank2,col=Object,group=Object))  + \n    geom_abline(intercept = 0, slope = 1) + \n    geom_point() + \n    theme_bw() + theme_pb() + scale_colour_emi(name=nn) + ggtitle(main)  +\n    scale_size_continuous(name=\"Average Value\",limits=ran) + geom_point(aes(label=Object,size=mean))+\n    xlab(paste(\"Place:\",names(xframe)[2])) + ylab(paste(\"Place:\",names(xframe)[3])) +\n    geom_text(aes(label=Object),colour=\"grey60\",vjust=1.5) + \n    scale_x_reverse(breaks=1:dim(xframe)[1]) + scale_y_reverse(breaks=1:dim(xframe)[1]) + \n    theme(panel.grid.minor = element_blank())\n  \n  if(outgr) return(g) else  print(g)\n  \n}\n\n\nmutation <- function(x,y,alpha=1){\n  mult <- seq(0,1,length.out=length(x))^alpha\n  z <- x * (1-mult) + y * mult\n  return(z)\n}\n\n\ngr <- function(x){\n  c(NA,x[-1]/x[-length(x)] - 1)\n}\n\n\ndaug <- function(x,gro){\n  \n  outx <- x\n  nna <- range(which(!is.na(x)))\n  \n  if(nna[2]!=length(x)){\n    outx[(nna[2]+1):length(outx)] <- outx[nna[2]] * cumprod(gro[(nna[2]+1):length(gro)] + 1)\n  }\n  \n  if(nna[1]!=1){\n    outx[1:(nna[1]-1)] <- outx[nna[1]] * rev(cumprod(rev(1/(gro[1:(nna[1]-1) + 1] + 1))))\n  }\n  return(outx)\n  \n}\n\n\n\n\nregionalpos <- function(k,pframe,plot=F,starter = 10000000,itermax = 10){\n  \n  abq <- as.numeric(k[,c(\"a\",\"b.cntUSD\",\"q\")])\n  xframe <- pframe[,c(\"Average.income\",\"est.Pos.norm\")]\n  \n  #funs\n  weights <- function(x){dsm(x,abq)}   \n  posfun <- function(x){\n    y <- splinefun(xframe,method = \"monoH.FC\")(x)\n    y[y<0] <- 0\n    y[y>100] <- 100\n    return(y)\n  }\n  fpcompose <- function(x){weights(x)*posfun(x)}\n  ###\n  \n  if(plot){\n    plot(xframe,type=\"p\",pch=20,xlim=c(0,200000),main=paste(k$CountryCode,k$City,k$Year,sep=\" - \"),col=\"firebrick3\")\n    curve(posfun,0,200000,add=T)\n    par(new=TRUE)\n    curve(weights,0,200000,xaxt=\"n\",yaxt=\"n\",xlab=\"\",ylab=\"\",col=4)\n    axis(4)\n    \n    #     curve(fpcompose,0,200000,main=paste(k$CountryCode,k$City,k$Year,sep=\" - \"))\n    #     points(xframe,pch=20)\n  }\n  \n  divider <- 1\n  out <- NA\n  iter <- 0\n  while((class(out)==\"try-error\" | is.na(out)) & iter < itermax){\n    out <- try(integrate(fpcompose,lower = 0,upper = starter/divider)$value)\n    divider <- divider * 5\n    iter <- iter + 1\n  }\n  \n  if(iter >= itermax){print(\"ALARM ALARM : MAX ITERATIONS REACHED\")\n                      break}\n  #   \n  #   if(!low){ \n  #     out <- try(integrate(fpcompose,lower = 0,upper = 100000000)$value)\n  #     if(class(out)==\"try-error\") out <- integrate(fpcompose,lower = 0,upper = 10000000)$value\n  #   } else {\n  #     out <- try(integrate(fpcompose,lower = 0,upper = 1000000)$value)\n  #     if(class(out)==\"try-error\") out <- integrate(fpcompose,lower = 0,upper = 100000)$value\n  #   }\n  \n  return(out)\n  \n}\n\n\n\nregionalposrest <- function(kof,pframe,plot=F,starter = 10000000){\n  \n  abq <- kof\n  #   print(abq)\n  \n  xframe <- pframe\n  \n  #   funs\n  weights <- function(x){dsm(x,abq)}   \n  posfun <- function(x){\n    y <- splinefun(xframe,method = \"monoH.FC\")(x)\n    y[y<0] <- 0\n    y[y>100] <- 100\n    return(y)\n  }\n  fpcompose <- function(x){weights(x)*posfun(x)}\n  ##\n  \n  if(plot){\n    plot(xframe,type=\"p\",pch=20,xlim=c(0,200000),col=\"firebrick3\")\n    curve(posfun,0,200000,add=T)\n    par(new=TRUE)\n    curve(weights,0,200000,xaxt=\"n\",yaxt=\"n\",xlab=\"\",ylab=\"\",col=4)\n    axis(4)\n  }\n  \n  if(any(abq<0) | any(is.na(abq))) {out <- -100} else {\n    \n    divider <- 1\n    out <- NA\n    while(class(out)==\"try-error\" | is.na(out)){\n      out <- try(integrate(fpcompose,lower = 0,upper = starter/divider)$value)\n      divider <- divider * 5\n      if(divider>10000) {out <- 0;break}\n    }\n  }\n  \n  return(out)\n  \n}\n\n\n\nstretch <- function(x,a,b){\n  \n  c <- (x[1] + x[length(x)])/2\n  ratio <- ((b - a)/2) / (x[length(x)] - c)\n  c <- as.numeric(c)\n  xnew <- (x - c) * as.numeric(ratio) + (a + b)/2\n  \n  return(xnew)\n}\n\n\nposfunction<- function(x,pframe){\n  y <- splinefun(pframe,method = \"monoH.FC\")(x)\n  y[y<0] <- 0\n  y[y>100] <- 100\n  return(y)\n}\n\nposfunctionreverse<- function(x,pframe){\n  if(all(pframe[,2]==mean(pframe[,2]))) pframe[1,2] <- pframe[1,2] - 0.000001\n  y <- splinefun(pframe[,c(2,1)],method = \"monoH.FC\")(x)\n  return(y)\n}\n\npframetransform <- function(pframe){\n  \n  postotal <- mean(pframe$est.Pos.norm)\n  incometotal <- mean(pframe$Average.income)\n  \n  incometotalfake <- posfunctionreverse(postotal,pframe)\n  ratio <- incometotal/incometotalfake\n  out <- pframe\n  out[,1] <- out[,1] * ratio\n  \n  out <- list(out,ratio)\n  \n  return(out)\n  \n}\n\n\npframetransformup <- function(pframe){\n  \n  postotal <- mean(pframe$est.Pos.norm)\n  incometotal <- mean(pframe$Average.income)\n  \n  postotalfake <- posfunction(incometotal,pframe)\n  ratio <- postotal/postotalfake\n  out <- pframe\n  out[,2] <- out[,2] * ratio\n  return(out)\n  \n}\n\n\nb.converter <- function(a,q,inctot){\n  inctot * a * gamma(q)/(gamma(1/a) * gamma(q - 1/a))\n}\n\nb.converter.reverse <- function(a,b,q){b * beta(1+1/a,q-1/a)/beta(1,q)}\n\n\ntest.all.conditions <- function(bigdata){\n  \n  ###########################################################################\n  # testing conditions ------------------------------------------------------\n  ###########################################################################\n  \n  if(\"ProductName\" %in% names(bigdata)){\n    names(bigdata)[names(bigdata)==\"ProductName\"] <- \"Possession\"\n    namechanged <- T\n  }\n  \n  CC <- unique(bigdata$CountryCode)\n  \n  for(cc in CC){\n    #     print(cc)\n    \n    xframe <- bigdata[bigdata$CountryCode == cc,]\n    \n    pc <- xframe[xframe$Possession == \"Possession of Personal Computer\",years]\n    int <- xframe[xframe$Possession == \"Possession of Internet Enabled Computer\",years]\n    br <- xframe[xframe$Possession == \"Possession of Broadband Internet Enabled Computer\",years]\n    \n    ctv <- xframe[xframe$Possession == \"Possession of Colour TV Set\",years]\n    sat <- xframe[xframe$Possession == \"Possession of Satellite TV System\",years]\n    cbl <- xframe[xframe$Possession == \"Possession of Cable TV\",years]\n    \n    \n    emptyPC <- all(is.na(pc))\n    emptyINT <- all(is.na(int))\n    emptyBR <- all(is.na(br))\n    emptyCTV <- all(is.na(ctv))\n    emptySAT <- all(is.na(sat))\n    emptyCBL <- all(is.na(cbl))\n    \n    \n    # PC INT BR ---------------------------------------------------------------\n    \n    #   matplotg(cbind(pc,int,br),text=T,stx=2005)\n    nr <- max(c(nrow(ctv),nrow(sat),nrow(cbl),nrow(pc),nrow(int),nrow(br)))\n    nc <- max(c(ncol(ctv),ncol(sat),ncol(cbl),ncol(pc),ncol(int),ncol(br)))\n    \n    if(emptyBR) br <- matrix(0,nrow=nr,ncol=nc)\n    if(emptyINT) int <- br\n    if(emptyPC) pc <- int\n    \n    pcint <- round(pc - int,2)    \n    \n    if(any(as.numeric(unlist(pcint)) < 0)){\n      print(paste(cc,\"int > pc\",sep=\" - \"))\n      #       matplotg(cbind(t(pc),t(int)),text=T,stx=2005,main=paste(cc,\"INT > PC before\"))\n      int[pcint < 0] <- pc[pcint < 0]\n      #       matplotg(cbind(t(pc),t(int)),text=T,stx=2005,main=paste(cc,\"INT > PC after\"))\n      \n      if(!emptyINT) bigdata[bigdata$CountryCode == cc & bigdata$Possession == \"Possession of Internet Enabled Computer\",years] <- int\n    }\n    \n    intbr <- round(int - br,2)\n    \n    if(any(as.numeric(unlist(intbr)) < 0)){\n      print(paste(cc,\"br > int\",sep=\" - \"))\n      #             matplotg(cbind(t(int),t(br)),text=T,stx=2005,main=paste(cc,\"BR > INT before\"))\n      br[intbr < 0] <- int[intbr < 0]\n      #             matplotg(cbind(t(int),t(br)),text=T,stx=2005,main=paste(cc,\"BR > INT after\"))\n      \n      if(!emptyBR) bigdata[bigdata$CountryCode == cc & bigdata$Possession == \"Possession of Broadband Internet Enabled Computer\",years] <- br\n    }\n    \n    # CTV SAT CBL -------------------------------------------------------------\n    \n    if(emptyCTV) ctv <- matrix(100,nrow=nr,ncol=nc)\n    if(emptySAT) sat <- matrix(0,nrow=nr,ncol=nc)\n    if(emptyCBL) cbl <- matrix(0,nrow=nr,ncol=nc)\n    \n    satcbl <- sat + cbl\n    ctvsatcbl <- round(ctv - satcbl,2)\n    satratio <- sat/satcbl\n    \n    if(any(as.numeric(unlist(ctvsatcbl)) < 0)){\n      print(paste(cc,\"sat + cbl > ctv\",sep=\" - \"))\n      #             matplotg(cbind(t(ctv),t(sat),t(cbl),satcbl=t(sat+cbl)),text=T,stx=2005,main=paste(cc,\"SAT + CBL > CTV before\"))\n      sat[ctvsatcbl < 0] <- ctv[ctvsatcbl < 0] * satratio[ctvsatcbl < 0]\n      cbl[ctvsatcbl < 0] <- ctv[ctvsatcbl < 0] * (1 - satratio[ctvsatcbl < 0])\n      #             matplotg(cbind(t(ctv),t(sat),t(cbl),satcbl=t(sat+cbl)),text=T,stx=2005,main=paste(cc,\"SAT + CBL > CTV after\"))\n      \n      if(!emptySAT) bigdata[bigdata$CountryCode == cc & bigdata$Possession == \"Possession of Satellite TV System\",years] <- sat\n      if(!emptyCBL) bigdata[bigdata$CountryCode == cc & bigdata$Possession == \"Possession of Cable TV\",years] <- cbl\n    }\n    \n  }\n  \n  \n  ###########################################################################\n  # testing constraints < 100; > 0 ------------------------------------------\n  ###########################################################################\n  \n  indexbad0 <- which(bigdata[,years] < 0,arr.ind = T)[,1]\n  \n  for(i in indexbad0){\n    \n    x <- bigdata[i,years]\n    #     plotg(x,main=paste(bigdata[i,\"City\"],bigdata[i,\"Possession\"],\"before\",sep=\" - \"))\n    x[x<0] <- 0\n    #     plotg(x,main=paste(bigdata[i,\"City\"],bigdata[i,\"Possession\"],\"after\",sep=\" - \"))\n    bigdata[i,years] <- x\n    \n  }\n  \n  indexbad100 <- which(bigdata[,years] > 100,arr.ind = T)[,1]\n  \n  for(i in indexbad100){\n    \n    x <- bigdata[i,years]\n    #     plotg(x,main=paste(bigdata[i,\"City\"],bigdata[i,\"Possession\"],\"before\",sep=\" - \"))\n    x[x>100] <- 100\n    #     plotg(x,main=paste(bigdata[i,\"City\"],bigdata[i,\"Possession\"],\"after\",sep=\" - \"))\n    bigdata[i,years] <- x\n    \n  }\n  \n  # if there WAS 100, there WILL BE 100\n  indexwere100 <- which(bigdata[,years[-1:-5]] == 100,arr.ind = T)[,1]\n  indexwere100 <- unique(indexwere100)\n  \n  for(i in indexwere100){\n    \n    print(i)\n    x <- bigdata[i,years]\n    nr <- min(which(x==100))\n    #     plotg(x,main=paste(bigdata[i,\"City\"],bigdata[i,\"Possession\"],\"before\",sep=\" - \"))\n    x[nr:length(x)] <- 100\n    #     plotg(x,main=paste(bigdata[i,\"City\"],bigdata[i,\"Possession\"],\"after\",sep=\" - \"))\n    bigdata[i,years] <- x\n    \n  }\n  \n  \n  if(namechanged) {names(bigdata)[names(xframe)==\"Possession\"] <- \"ProductName\"}\n  \n  return(bigdata)\n  \n}\n\n\n\nhatfun <- function(x,right = 1,stp=1,crit = 0.01,plot=F){\n  \n  out <- c()\n  for(i in 2:(length(x)-right)){\n    if((x[i] > x[i-1] & x[i] > (1 + crit) * x[i+right]) |\n         (x[i] < x[i-1] & x[i] < (1 - crit) * x[i+right])) out[i] <- T else out[i] <- F\n  }\n  \n  hatnr <- which(out)\n  hatnr[hatnr<=stp] <- NA\n  hatnr <- hatnr[!is.na(hatnr)]\n  \n  if(plot) {plot(x); points(hatnr,x[hatnr],col=2,pch=8)}\n  \n  return(hatnr)\n  \n}\n\n\n\ndistratio <- function(theta1,theta2,p=0.35,plot=F){\n  \n  divider <- (psm(qsm(0.5+p,theta1),theta2) - psm(qsm(0.5-p,theta1),theta2))\n  \n  retribution <- (integrate(f,qsm(0.5-p,theta1),qsm(0.5+p,theta1),theta=theta2)$value/divider)/\n    (integrate(f,qsm(0.5-p,theta1),qsm(0.5+p,theta1),theta=theta1)$value/(p*2))\n  \n  if(plot){\n    x <- seq(0,theta1[2]*2,length.out=1000)\n    plot(x,dsm(x,theta1),type=\"l\",main=paste0(\"p = \",round(p,2),\", divider = \",round(divider,2),\", ratio = \",round(retribution,2)))\n    lines(x,dsm(x,theta2),type=\"l\",col=4)\n    abline(v=c(qsm(0.5+p,theta1),qsm(0.5-p,theta1)),col=3)\n    abline(v=c(qsm(0.5,theta1)),col=\"darkgreen\",lty=2)\n    \n  }\n  \n  return(retribution)\n  \n}\n\nsetp <- function(ptt,m=0.42,alpha=1){\n  (m) * (1.02 - ptt/100)^(alpha)\n}\n\n\n\nhatfun.solve <- function(x,itermax=50,...){\n  \n  solve <- T\n  iter <- 0\n  while(solve & iter <= itermax){\n    iter <- iter + 1\n    hnr <- hatfun(x,...)\n    if(length(hnr)>0){\n      x[hnr] <- NA\n      x <- MASplineVector(x)\n    } else {solve <- F}\n  }\n  \n  return(x)\n}\n\n\n\nthief.solve <- function(x,itermax=50,...){\n  \n  solve <- T\n  iter <- 0\n  while(solve & iter <= itermax){\n    iter <- iter + 1\n    hnr <- thiefnr(x,c...)\n    if(length(hnr)>0){\n      x[hnr] <- NA\n      x <- MASplineVector(x)\n    } else {solve <- F}\n  }\n  \n  return(x)\n}\n\n\n\n\ndisplaysm <- function(theta,main=\"\"){\n  arg <- seq(0,theta[2]*4,by=10)\n  plot(arg,dsm(arg,theta=theta),type=\"l\",main=main)\n}\n\n\ndurmatplot.simple <- function(xframe,totframe,legend=T,...){\n  \n  #   if(is.null(ylim)) ylim=range(xframe)\n  xai <- as.numeric(rownames(xframe))\n  matplot(xai,xframe,lty=1,type=\"l\",col=emi_pal()(dim(xframe)[2]),xlab=\"Year\",xlim=c(2003,2032),...)\n  lines(totframe[,c(1,3)],lwd=3)\n  grid(col=\"grey70\")\n  if(legend)legend(\"bottomright\",col=emi_pal()(dim(xframe)[2]),lty=1,legend=names(xframe),cex=0.5)\n  text(rep(2004,ncol(xframe)),xframe[1,],labels = names(xframe),col=emi_pal()(dim(xframe)[2]),cex=0.5)\n  text(rep(2031,ncol(xframe)),xframe[nrow(xframe),],labels = names(xframe),col=emi_pal()(dim(xframe)[2]),cex=0.5)\n  \n  \n}\n\ndurmatplot.simple.2 <- function(xframe,xframenew,totframe,main=\"\",ylim=NULL){\n  \n  if(is.null(ylim)) ylim=range(xframe)\n  xai <- as.numeric(rownames(xframe))\n  matplot(xai,xframe,lty=1,type=\"l\",main=main,col=emi_pal()(dim(xframe)[2]),xlab=\"Year\",ylab=\"Possession %\",ylim=ylim)\n  grid(col=\"grey85\")\n  matplot(xai,xframenew,lty=2,type=\"l\",main=main,col=emi_pal()(dim(xframe)[2]),xlab=\"Year\",ylab=\"Possession %\",ylim=ylim,add=T)\n  \n  lines(totframe[,c(\"Index\",\"value\")],lwd=3)\n  legend(\"bottomright\",col=emi_pal()(dim(xframe)[2]),lty=1,legend=names(xframe),cex=0.5)\n  \n}\n\n\n\n# allpos graph ------------------------------------------------------------\n\nallpos.graph <- function(allpos,dt,incallnormabq,date=F){\n  \n  unikas <- unique(allpos[,c(\"CountryCode\",\"MeasureType\",\"ProductName\")])\n  unikas <- arrange(unikas,MeasureType,CountryCode)\n  \n  filename <- \"plots/allpos.pdf\"\n  if(date) filename <- paste0(\"plots/allpos \",Sys.Date(),\".pdf\")\n  \n  pdf(file=filename,width=13,height=10)\n  titlepage(\"All Durable Goods\",sub = \"Forecasts\",author=\"Povilas. B\")\n  \n  for(i in 1:nrow(unikas)){\n    #   for(i in 1:86){\n    \n    cc <- unikas[i,1]\n    mt <- unikas[i,2]\n    pn <- unikas[i,3]\n    \n    print(paste(cc,mt,pn,sep=\" - \"))\n    \n    xframe <- allpos[allpos$CountryCode==cc & allpos$MeasureType==mt & allpos$ProductName==pn,]\n    nxframe <- xframe$Subsector\n    xframe <- data.frame(t(xframe[,years]))\n    names(xframe) <- nxframe\n    totframe <- as.numeric(dt[dt$CountryCode==cc & dt$ProductName==pn,paste0(\"Y\",years)])\n    totframe <- data.frame(cbind(Index=years,variable=\"Total\",value = totframe))\n    totframe$value <- as.numeric(as.character(totframe$value))\n    totframe$Index <- as.numeric(as.character(totframe$Index))\n    \n    layout(matrix(c(1,1,1,1,2,3,4,5), 2, 4, byrow = TRUE),heights = c(2,1))\n    \n    durmatplot.simple(xframe,totframe,main=paste(cc,mt,pn,sep=\" - \"))\n    \n    #   g1 <- matplotg(xframe,main=paste(cc,mt,pn,sep=\" - \"),stx=2005,outgr=T,\n    #                  nrowslegend = 2,text=T,point=F,numbertext = F)\n    #   g1 <- g1 + geom_line(data=totframe,col=\"black\",size=rel(1.2))\n    #   print(g1)\n    \n    #  ------------------------------------------------------------------------\n    \n    framepnabq <- incallnormabq[incallnormabq$CountryCode==cc & incallnormabq$Possession==pn & \n                                  incallnormabq$MeasureType==mt,]\n    framepnabq$Possession <- NULL\n    mframepnabq <- melt(framepnabq,id.vars=names(framepnabq)[1:4])\n    names(mframepnabq)[5] <- \"var\"\n    \n    mframepnabq <- dcast(mframepnabq,CountryCode+MeasureType + variable + var ~ Subsector)\n    \n    kofcn <- kofrecall[kofrecall$CountryCode==cc & kofrecall$Possession==pn,]\n    kofcn$CountryName <- b.converter.reverse(kofcn$a,kofcn$b,kofcn$q)\n    names(kofcn)[length(kofcn)] <- \"value\"\n    names(kofcn)[3] <- \"variable\"\n    mkofcn <- melt(kofcn,id.vars=names(kofcn)[1:3])\n    names(mkofcn)[4] <- \"var\"\n    mkofcn$variable <- as.numeric(as.character(mkofcn$variable))\n    \n    durmatplot.simple(data.frame(mframepnabq[mframepnabq$var==\"value\",-1:-4],row.names = years,check.names=F),\n                      mkofcn[mkofcn$var==\"value\",-1:-2],main=\"Average Income\",legend=F,ylab=\"\")\n    \n    durmatplot.simple(data.frame(mframepnabq[mframepnabq$var==\"a\",-1:-4],row.names = years,check.names=F),\n                      mkofcn[mkofcn$var==\"a\",-1:-2],main=\"a\",legend=F,ylab=\"\")\n    \n    durmatplot.simple(data.frame(mframepnabq[mframepnabq$var==\"b\",-1:-4],row.names = years,check.names=F),\n                      mkofcn[mkofcn$var==\"b\",-1:-2],main=\"b\",legend=F,ylab=\"\")\n    \n    durmatplot.simple(data.frame(mframepnabq[mframepnabq$var==\"q\",-1:-4],row.names = years,check.names=F),\n                      mkofcn[mkofcn$var==\"q\",-1:-2],main=\"q\",legend=F,ylab=\"\")\n    \n    #   g2 <- ggplot(mframepnabq,aes(x=variable,y=value,colour=Subsector)) + theme_bw() + theme_pb()+\n    #     facet_wrap(~var,nrow=1,scales = \"free_y\") + geom_line() + scale_colour_emi() + \n    #     theme(strip.background = element_rect(colour = \"grey20\", fill = \"skyblue4\"),\n    #           strip.text = element_text(colour = \"white\")) + \n    #     geom_line(data=mkofcn,col=\"black\",size=rel(1.2)) + theme(legend.position=\"none\")\n    #   \n    #   \n    #   g <- arrangeGrob(g1,g2,heights=c(3,1),nrow=2)\n    #   print(g)\n    \n  }\n  \n  dev.off()\n  \n}\n\n\n\n\n# over100 v2 --------------------------------------------------------------\n\nover100.v2 <- function(xframe,border=1,divover=2,plot=F){\n  \n  goodmax <- max(xframe[xframe<100])\n  if(length(which(xframe > 100,arr.ind = T)[,2])==0) minbadnr <- Inf else \n    minbadnr <- min(which(xframe > 100,arr.ind = T)[,2])\n  oxframe <- xframe\n  \n  xframe <- t(apply(xframe,1,function(x){\n    if(any(x > 100)){\n      #       bcnr <- max(c(1,min(which(x > 100)) - border))\n      bcnr <- max(c(1,minbadnr - border))\n      \n      if(as.character(x[bcnr]) == as.character(goodmax)){\n        \n        x[x > 100] <- as.numeric(x[bcnr])\n      } else {\n        \n        x[x > 100] <- (x[x > 100] - 100)/divover + x[x > 100]\n        if (mean(as.numeric(x[bcnr:length(x)]))!=100){\n          x[bcnr:length(x)] <- stretch(x[bcnr:length(x)],x[bcnr],goodmax)\n        }\n      }\n    }\n    return(x)\n  }))\n  \n  xframe[xframe>100] <- 100\n  \n  if(plot){\n    #       matplotf(t(oxframe),abline=c(0,100),text=T,main=\"Before\")\n    matplotf(t(xframe),abline=c(0,100),text=T,main=\"After\")\n    \n  }\n  \n  return(xframe)\n  \n}\n\n\n\nce.constantination <- function(bigdataframe,cpi){\n  \n  for(cc in unique(bigdataframe$CountryCode)){\n    \n    xframe <- bigdataframe[bigdataframe$CountryCode==cc,]\n    \n    xframe[,years] <- t(apply(xframe[,years],1,function(x){  # sitas yra tik del to, kad nera padarytas tenure!!!\n      MASplineVector(x,k = 1.1)\n    }))\n    \n    cpicc <- cpi[cpi$CountryCode==cc,years]\n    cpicc <- cpicc/cpicc[,\"2013\"]*100\n    \n    xframe[,years] <- t(apply(xframe[,years],1,function(x){\n      x/as.numeric(cpicc)*100\n    }))\n    \n    bigdataframe[bigdataframe$CountryCode==cc,] <- xframe\n    \n  }\n  \n  return(bigdataframe)\n}\n\n\nconverter <- function(x,cc,year){\n  \n  xframe <- framelist[[cc]]\n  imat <- xframe[xframe$ProductName==\"inc\",-1:-3]\n  emat <- xframe[xframe$ProductName==\"exp\",-1:-3]\n  \n  imean <- apply(imat,2,mean)\n  emean <- apply(emat,2,mean)\n  \n  ratio <- as.numeric(imean[year-2004]/emean[year-2004])\n  \n  x * ratio\n}\n\n\n\n# testing.all.conditions.cities -------------------------------------------\n\ntest.all.conditions.cities <- function(bigdata,plot=F){\n  \n  ###########################################################################\n  # testing conditions ------------------------------------------------------\n  ###########################################################################\n  \n  if(plot){\n    pdf(file=paste(\"plots/test all conditions cities\",Sys.Date(),\".pdf\"),width=13,height=8)\n    titlepage(\"Regions Conditions\",sub = \"\",author=\"Povilas. B\")\n  }\n  \n  if(\"ProductName\" %in% names(bigdata)){\n    names(bigdata)[names(bigdata)==\"ProductName\"] <- \"Possession\"\n    namechanged <- T\n  }\n  \n  \n  cclist <- unique(bigdata[,c(\"CityCode\")])\n  #   cclist <- cclist[cclist!=\"Total\"]\n  \n  for(cc in cclist){\n    #     print(cc)\n    \n    xframe <- bigdata[bigdata$CityCode == cc,]\n    \n    # pc <- opc <- xframe[xframe$Possession == \"Possession of Personal Computer\",years]\n    int <- oint <- xframe[xframe$Possession == \"Possession of Internet Enabled Computer\",years]\n    br <- obr <- xframe[xframe$Possession == \"Possession of Broadband Internet Enabled Computer\",years]\n    \n    ctv <- octv <- xframe[xframe$Possession == \"Possession of Colour TV Set\",years]\n    sat <- osat <- xframe[xframe$Possession == \"Possession of Satellite TV System\",years]\n    cbl <- ocbl <- xframe[xframe$Possession == \"Possession of Cable TV\",years]\n    \n    \n    # emptyPC <- all(is.na(pc))\n    emptyINT <- all(is.na(int))\n    emptyBR <- all(is.na(br))\n    emptyCTV <- all(is.na(ctv))\n    emptySAT <- all(is.na(sat))\n    emptyCBL <- all(is.na(cbl))\n    \n    \n    # PC INT BR ---------------------------------------------------------------\n    \n    #   matplotg(cbind(pc,int,br),text=T,stx=2005)\n    # nr <- max(c(nrow(ctv),nrow(sat),nrow(cbl),nrow(pc),nrow(int),nrow(br)))\n    # nc <- max(c(ncol(ctv),ncol(sat),ncol(cbl),ncol(pc),ncol(int),ncol(br)))\n    \n    nr <- max(c(nrow(ctv),nrow(sat),nrow(cbl),nrow(int),nrow(br)))\n    nc <- max(c(ncol(ctv),ncol(sat),ncol(cbl),ncol(int),ncol(br)))\n    \n    if(emptyBR) br <- matrix(0,nrow=nr,ncol=nc)\n    if(emptyINT) int <- br\n    # if(emptyPC) pc <- int\n    \n    PG <- F\n    \n    # pcint <- round(pc - int,2)    \n    \n    # if(any(as.numeric(unlist(pcint)) < 0)){\n    #   print(paste(cc,\"int > pc\",sep=\" - \"))\n    #   int[pcint < 0] <- pc[pcint < 0]      \n    #   if(!emptyINT) bigdata[bigdata$CityCode == cc & bigdata$Possession == \"Possession of Internet Enabled Computer\",years] <- int\n    #   PG <- T\n    # }\n    \n    intbr <- round(int - br,2)\n    \n    if(any(as.numeric(unlist(intbr)) < 0)){\n      print(paste(cc,\"br > int\",sep=\" - \"))\n      br[intbr < 0] <- int[intbr < 0]\n      if(!emptyBR) bigdata[bigdata$CityCode == cc & bigdata$Possession == \"Possession of Broadband Internet Enabled Computer\",years] <- br\n      PG <- T\n    }\n    \n    if(plot & PG){\n      # matplotf(data.frame(cbind(pc=as.numeric(t(opc)),int=as.numeric(t(oint)),br=as.numeric(t(obr)))),text=T,stx=2005,main=paste(xframe$CountryCode[1],xframe$City[1],\"before\",sep=\" - \"),abline=c(0,100))\n      # matplotf(data.frame(cbind(pc=as.numeric(t(pc)),int=as.numeric(t(int)),br=as.numeric(t(br)))),text=T,stx=2005,main=paste(xframe$CountryCode[1],xframe$City[1],\"after\",sep=\" - \"),abline=c(0,100))\n      matplotf(data.frame(cbind(int=as.numeric(t(oint)),br=as.numeric(t(obr)))),text=T,stx=2005,main=paste(xframe$CountryCode[1],xframe$City[1],\"before\",sep=\" - \"),abline=c(0,100))\n      matplotf(data.frame(cbind(int=as.numeric(t(int)),br=as.numeric(t(br)))),text=T,stx=2005,main=paste(xframe$CountryCode[1],xframe$City[1],\"after\",sep=\" - \"),abline=c(0,100))\n    }\n    \n    \n    # CTV SAT CBL -------------------------------------------------------------\n    \n    if(emptyCTV) ctv <- matrix(100,nrow=nr,ncol=nc)\n    if(emptySAT) sat <- matrix(0,nrow=nr,ncol=nc)\n    if(emptyCBL) cbl <- matrix(0,nrow=nr,ncol=nc)\n    \n    satcbl <- sat + cbl\n    ctvsatcbl <- round(ctv - satcbl,2)\n    satratio <- sat/satcbl\n    \n    if(any(as.numeric(unlist(ctvsatcbl)) < 0)){\n      print(paste(cc,\"sat + cbl > ctv\",sep=\" - \"))\n      #             matplotf(cbind(t(ctv),t(sat),t(cbl),satcbl=t(sat+cbl)),text=T,stx=2005,main=paste(cc,\"SAT + CBL > CTV before\"))\n      sat[ctvsatcbl < 0] <- ctv[ctvsatcbl < 0] * satratio[ctvsatcbl < 0]\n      cbl[ctvsatcbl < 0] <- ctv[ctvsatcbl < 0] * (1 - satratio[ctvsatcbl < 0])\n      #             matplotf(cbind(t(ctv),t(sat),t(cbl),satcbl=t(sat+cbl)),text=T,stx=2005,main=paste(cc,\"SAT + CBL > CTV after\"))\n      \n      if(!emptySAT) bigdata[bigdata$CityCode == cc & bigdata$Possession == \"Possession of Satellite TV System\",years] <- sat\n      if(!emptyCBL) bigdata[bigdata$CityCode == cc & bigdata$Possession == \"Possession of Cable TV\",years] <- cbl\n    }\n    \n  }\n  \n  if(plot){dev.off()}\n  \n  ###########################################################################\n  # testing constraints < 100; > 0 ------------------------------------------\n  ###########################################################################\n  \n  indexbad0 <- unique(which(bigdata[,years] < 0,arr.ind = T)[,1])\n  \n  for(i in indexbad0){\n    \n    x <- bigdata[i,years]\n    #     plotg(x,main=paste(bigdata[i,\"City\"],bigdata[i,\"Possession\"],\"before\",sep=\" - \"))\n    x[x<0] <- 0\n    #     plotg(x,main=paste(bigdata[i,\"City\"],bigdata[i,\"Possession\"],\"after\",sep=\" - \"))\n    bigdata[i,years] <- x\n    \n  }\n  \n  indexbad100 <- unique(which(bigdata[,years] > 100,arr.ind = T)[,1])\n  \n  for(i in indexbad100){\n    \n    x <- bigdata[i,years]\n    #         plotg(x,main=paste(bigdata[i,\"City\"],bigdata[i,\"Possession\"],\"before\",sep=\" - \"))\n    x[x>100] <- 100\n    #         plotg(x,main=paste(bigdata[i,\"City\"],bigdata[i,\"Possession\"],\"after\",sep=\" - \"))\n    bigdata[i,years] <- x\n    \n  }\n  \n  # if there WAS 100, there WILL BE 100\n  indexwere100 <- which(bigdata[,years[-1:-5]] == 100,arr.ind = T)[,1]\n  indexwere100 <- unique(indexwere100)\n  \n  for(i in indexwere100){\n    \n    print(i)\n    x <- bigdata[i,years]\n    nr <- min(which(x==100))\n    #         plotg(x,main=paste(bigdata[i,\"City\"],bigdata[i,\"Possession\"],\"before\",sep=\" - \"))\n    x[nr:length(x)] <- 100\n    #         plotg(x,main=paste(bigdata[i,\"City\"],bigdata[i,\"Possession\"],\"after\",sep=\" - \"))\n    bigdata[i,years] <- x\n    \n  }\n  \n  \n  #   if(namechanged) {names(bigdata)[names(xframe)==\"Possession\"] <- \"ProductName\"}\n  \n  return(bigdata)\n  \n}\n\n\n\n\navgdec.from.qbq <- function(theta){\n  \n  pk <- function(xx,theta){integrate(qsm,xx[1],xx[2],subdivisions=1000,theta=theta)$value}  \n  \n  q<-c(seq(0,1,by=0.1))\n  fit <- c()\n  for(i in 1:(length(q)-1)){\n    fit <- c(fit,pk(c(q[i],q[i+1]),theta)/(q[i+1] - q[i]))\n  }\n  \n  return(fit)\n}\n\n\n\n\ncities.possession.graphs <- function(bigdata,date=T){\n  \n  ucp <- unique(bigdata[,c(\"CityCode\")])\n  ucp <- ucp[ucp %in% tier$CityCode & !(ucp %in% bigdata$CountryCode)] # cia kad breztu tik miestus\n  \n  # ucp[780:810]\n  # 16*ccc,h=13*ccc\n  pdftitle <- paste0(\"plots/cities possession \",gsub(\":\",\"-\",Sys.time()),\".pdf\")\n  \n  pdf(pdftitle,width=16 * 0.75,height=13 * 0.75)\n  titlepage(\"Forecasted Regions and Cities\", \"Possessions\",date=Sys.time(),size=15,author=\"Povilas Bockus\")\n  \n  for(index in 1:length(ucp)){\n    #   for(index in 1:10){\n    \n    print(ucp[index])\n    \n    cc <- as.character(ucp[index])\n    #   pn <- as.character(ucp[index,\"Possession\"])\n    \n    xframe <- bigdata[bigdata$CityCode==cc,]\n    \n    cn <- xframe$CountryCode[1]  \n    rc <- tier[tier$CityCode==cc,\"RegionCode\"][1]\n    \n    xframe <- cbind(xframe,RegionCode = NA)\n    xframe$RegionCode <- rc\n    maintitle <- paste(cn,paste0(tier[tier$CityCode==cc,\"Region\"],\" (\",rc,\")\"),paste0(xframe$City[1],\" (\",cc,\")\"),sep=\" - \")\n    \n    totxframe <- bigdata[bigdata$CityCode==cn & bigdata$Possession %in% xframe$Possession,]\n    regxframe <- bigdata[bigdata$CityCode==rc & bigdata$Possession %in% xframe$Possession,]\n    \n    #   group1 <- c(2495,2504,2505)\n    #   group2 <- c(12981,2498,2515,59926,2502,2497,2514)\n    \n    for(groupnr in 1:6){\n      \n      if(groupnr==1) group <- c(2495,2504,2505)\n      if(groupnr==2) group <- c(12981,2498,2515,59926,2502,2497,2514)\n      if(groupnr==3) group <- c(2496,2499,12980,12987)\n      if(groupnr==4) group <- c(2511,  68800,\t2506,\t59927,\t87218\t,152648)\n      if(groupnr==5) group <- c(2512,  2513,\t2516,\t2500,\t12988,\t2494)\n      if(groupnr==6) group <- c(12982,  2501,\t2503,\t2508)\n      \n      print(group)\n      \n      # pagrindinis grafikas\n      \n      xframe.g <- xframe[xframe$ProductID %in% group,]\n      totxframe.g <- totxframe[totxframe$ProductID %in% group,]\n      regxframe.g <- regxframe[regxframe$ProductID %in% group,]\n      \n      xframe.g <- data.frame(t(xframe.g[,years]))\n      totxframe.g <- data.frame(t(totxframe.g[,years]))\n      regxframe.g <- data.frame(t(regxframe.g[,years]))\n      \n      emptyregtest <- dim(regxframe.g)[2]==0\n      \n      names(xframe.g) <- names(totxframe.g) <- xframe[xframe$ProductID %in% group,]$Possession\n      if(!emptyregtest) names(regxframe.g) <- xframe[xframe$ProductID %in% group,]$Possession\n      \n      layout(matrix(c(1,1,1,2,3,4), 2, 3, byrow = TRUE),heights = c(2.5,1))\n      \n      \n      matplotf(totxframe.g,legend = F,abline=c(0,100,120),stx=2005,lty=1,lwd=0.75,turnoffpar = T,yaxt='n',main=maintitle)\n      if(!emptyregtest) matplotf(regxframe.g,legend = F,abline=c(0,100),stx=2005,lty=5,add=T,lwd=1,turnoffpar = T)\n      matplotf(xframe.g,legend = F,abline=c(0,100),stx=2005,add=T,lwd=3.25,turnoffpar = T)\n      axis(2, at=seq(0,100,by=20), labels=as.character(seq(0,100,by=20)))\n      \n      rect(-1, 150,3000,105,col = \"white\")\n      \n      legend(\"topleft\",col=emi_pal()(ncol(xframe.g)),lty=1,box.col=\"white\",lwd=3.25,\n             legend = names(xframe.g),cex=1,horiz=F,y.intersp = 0.8)\n      \n      if(!emptyregtest){\n        legend(\"topright\",lty=c(1,5,1),lwd=c(3.25,1,0.75),box.col=\"white\",\n               legend = c(\"City\",\"Region\",\"Country\"),cex=1,y.intersp = 0.8)\n      } else {\n        legend(\"topright\",lty=c(1,6),lwd=c(3.25,0.75),box.col=\"white\",\n               legend = c(\"City\",\"Country\"),cex=1,y.intersp = 0.8)  \n      }\n      \n      cola <- emi_pal()(ncol(xframe.g))\n      names(cola) <- xframe[xframe$ProductID %in% group,]$Possession\n      \n      # w(w=17,h=12)\n      \n      \n      # originaliu duomenu rankingas\n      \n      years2 <- as.character(2005:2020)\n      ccrank <- c()\n      codeslength <- c()\n      \n      for(pn in unique(xframe[xframe$ProductID %in% group,]$Possession)){\n        \n        his <- hp[hp$CountryCode==cn & hp$ProductName==pn,]\n        xis <- bigdata[bigdata$CountryCode==cn & bigdata$Possession==pn & bigdata$CityCode %in% tier$CityCode,]\n        codes <- intersect(xis$CityCode,his$RegionCode)  \n        codeslength[pn] <- length(codes)\n        \n        if(length(codes)==0) next\n        if(!cc %in% codes) next\n        \n        his <- arrange(his[his$RegionCode %in% codes,c(\"RegionCode\",years2)],RegionCode)\n        xis <- arrange(xis[xis$CityCode %in% codes,c(\"CityCode\",years2)],CityCode)\n        \n        xis[which(is.na(his),arr.ind = T)] <- NA\n        \n        rankmat <- data.frame(cbind(CityCode = xis[,1],Original = apply(his[,-1],1,function(x){mean(x,na.rm=T)}),\n                                    Modelled = apply(xis[,-1],1,function(x){mean(x,na.rm=T)})),stringsAsFactors=F)\n        rankmat[,2:3] <- apply(rankmat[,2:3],2,as.numeric)\n        rankmat[,2:3] <- apply(rankmat[,2:3],2,rank)\n        rankmat[,2:3] <- apply(rankmat[,2:3],2,function(x){nrow(rankmat) + 1 - x})\n        \n        ccrank <- rbind(ccrank,cbind(Possession = pn,rankmat[rankmat[,1]==cc,]))\n        \n      }\n      \n      if(is.null(ccrank)){\n        plot(c(1,1),type=\"n\",main=\"Orignal vs Modelled ranking\",ylab=\"\",xlab=\"\",yaxt='n',xaxt='n')\n        text(x=1.5,y=1,labels = \"No Original Data for This City\")\n      } else {\n        plot(ccrank[,c(\"Original\",\"Modelled\")],pch=20,col=cola[ccrank$Possession],\n             xlim=rev(c(1,max(codeslength))),ylim=rev(c(1,max(codeslength))),main=\"Orignal vs Modelled ranking\")\n        abline(a=0,b=1,col=\"grey50\")  \n        points(ccrank[,c(\"Original\",\"Modelled\")],pch=20,col=cola[ccrank$Possession],cex=1.8,\n               xlim=rev(c(1,max(codeslength))),ylim=rev(c(1,max(codeslength))))\n      }\n      \n      \n      # prognoziu rankingas\n      \n      ccrank2 <- c()\n      codeslength2 <- c()\n      \n      for(pn in unique(xframe[xframe$ProductID %in% group,]$Possession)){\n        \n        xis <- bigdata[bigdata$CountryCode==cn & bigdata$Possession==pn & bigdata$CityCode %in% tier$CityCode,]\n        codeslength2[pn] <- dim(xis)[1]\n        \n        rankmat <- data.frame(cbind(\"CityCode\" = xis[,\"CityCode\"],\"2014\" = xis[,\"2014\"],\"2030\" = xis[,\"2030\"]),stringsAsFactors=F,check.names=F)\n        rankmat[,2:3] <- apply(rankmat[,2:3],2,as.numeric)\n        rankmat[,2:3] <- apply(rankmat[,2:3],2,rank)\n        rankmat[,2:3] <- apply(rankmat[,2:3],2,function(x){nrow(rankmat) + 1 - x})\n        \n        ccrank2 <- rbind(ccrank2,cbind(Possession = pn,rankmat[rankmat[,1]==cc,]))\n        \n      }\n      \n      \n      plot(ccrank2[,c(\"2014\",\"2030\")],pch=20,col=cola[ccrank2$Possession],\n           xlim=rev(c(1,max(codeslength2))),ylim=rev(c(1,max(codeslength2))),main=\"2014 vs 2030 forecasts ranking\")\n      abline(a=0,b=1,col=\"grey50\")  \n      points(ccrank2[,c(\"2014\",\"2030\")],pch=20,col=cola[ccrank2$Possession],cex=1.8,\n             xlim=rev(c(1,max(codeslength2))),ylim=rev(c(1,max(codeslength2))))  \n      \n      # miestu ir saliu income\n      \n      avicn <- avicity[avicity$CountryCode==cn,]\n      avicn <- avicn[,c(\"CityCode\",\"Year\",\"AI\")]\n      avicn <- dcast(avicn,CityCode ~ Year,value.var=\"AI\")\n      avicn[,-1] <- t(apply(avicn[,-1],1,function(x){\n        if(!all(is.na(x))) x <- MASplineVector(x)\n        return(x)\n      }))\n      avicno <- avicn\n      avicn <- data.frame(t(avicn[-1]))\n      names(avicn) <- avicno[,1]\n      \n      inccolour <- \"#00AED9\"\n      \n      matplotf(avicn,legend = F,stx=2005,lwd=0.8,turnoffpar = T,main=\"Average Income\",col=\"grey65\")\n      if(cn %in% names(avicn)) lines(2005:2030,as.numeric(avicn[,cn]),lwd=1.5,col=4,lty=1)\n      if(rc %in% names(avicn)) lines(2005:2030,as.numeric(avicn[,rc]),lwd=1.5,col=4,lty=5)\n      lines(2005:2030,as.numeric(avicn[,cc]),lwd=3,col=4)\n      \n    }\n    \n  }\n  \n  \n  dev.off()\n  \n}\n\n\n\n# cities.possession.graphs.grubus -----------------------------------------\n\ncities.possession.graphs.grubus <- function(bigdata,date=T,filename=\"\",info1=\"\",info2=\"\"){\n  \n  ucp <- unique(bigdata[,c(\"CountryCode\")])\n  #   ucp <- ucp[ucp %in% tier$CityCode & !(ucp %in% bigdata$CountryCode)] # cia kad breztu tik miestus\n  \n  # ucp[780:810]\n  # 16*ccc,h=13*ccc\n  \n  pdftitle <- paste0(filename,gsub(\":\",\"-\",Sys.time()),\".pdf\")\n  \n  pdf(pdftitle,width=16 * 0.75,height=13 * 0.75)\n  print(titlepage(info1,info2,date=Sys.time(),size=15,author=\"Povilas Bockus\"))\n  \n  for(index in 1:length(ucp)){\n    #   for(index in 1:10){\n    \n    print(ucp[index])\n    cn <- ucp[index]\n    \n    bigxframe <- bigdata[bigdata$CountryCode==cn,]\n    pnlist <- unique(bigxframe$Possession)\n    \n    for(pn in pnlist){\n      print(pn)\n      \n      xframe <- bigxframe[bigxframe$Possession==pn,]\n      \n      maintitle <- paste(cn,pn,sep=\" - \")\n      \n      xframe.g <- data.frame(t(xframe[,years]))\n      names(xframe.g) <- xframe$CityCode\n      \n      \n      layout(matrix(c(1,1,1,2,3,4), 2, 3, byrow = TRUE),heights = c(2.5,1))\n      \n      notcitynames <- xframe$CityCode[!xframe$CityCode %in% tier$CityCode]\n      citynames <- xframe$CityCode[xframe$CityCode %in% tier$CityCode]\n      citycodes <- intersect(xframe[xframe$CityCode %in% citynames,\"CityCode\"],tier$CityCode)\n      if(length(notcitynames)==1) notcitynames <- rep(notcitynames,2)\n      if(length(citynames)==0) citynames <- setdiff(xframe$CityCode,cn)\n      if(length(citycodes)==0) citycodes <- setdiff(xframe$CityCode,cn)\n      if(length(citynames)==1) citynames <- rep(citynames,2)\n      if(length(citycodes)==1) citycodes <- rep(citycodes,2)\n      \n      g1.xframe.g <- xframe.g\n      names(g1.xframe.g) <- paste(xframe$City,xframe$CityCode,sep=\":\")\n      \n      matplotf(g1.xframe.g,legend = F,abline=c(0,100),stx=2005,lty=1,turnoffpar = T,main=maintitle,text = T,col=\"white\")\n      matplotf(xframe.g[,notcitynames],legend = F,stx=2005,lty=1,turnoffpar = T,add=T,col=\"grey70\")\n      matplotf(xframe.g[,citynames],legend = F,abline=c(0,100),stx=2005,lty=1,turnoffpar = T,main=maintitle,text = T,add=T,lwd=2)\n      lines(2005:2030,xframe.g[,cn],lwd=4)\n      \n      \n      \n      cola <- emi_pal()(nrow(xframe))\n      names(cola) <- xframe$CityCode\n      \n      # w(w=17,h=12)\n      \n      \n      # originaliu duomenu rankingas\n      \n      years2 <- as.character(2005:2020)\n      ccrank <- c()\n      codeslength <- c()\n      \n      \n      his <- hp[hp$CountryCode==cn & hp$ProductName==pn,]\n      xis <- xframe\n      codes <- intersect(xis$CityCode,his$RegionCode)  \n      codeslength <- length(codes)\n      \n      if(length(codes)==0 | !cn %in% codes) ccrank <- NULL else {\n        \n        his <- arrange(his[his$RegionCode %in% codes,c(\"RegionCode\",years2)],RegionCode)\n        xis <- arrange(xis[xis$CityCode %in% codes,c(\"CityCode\",years2)],CityCode)\n        \n        xis[which(is.na(his),arr.ind = T)] <- NA\n        \n        rankmat <- data.frame(cbind(CityCode = xis[,1],Original = apply(his[,-1],1,function(x){mean(x,na.rm=T)}),\n                                    Modelled = apply(xis[,-1],1,function(x){mean(x,na.rm=T)})),stringsAsFactors=F)\n        rankmat[,2:3] <- apply(rankmat[,2:3],2,as.numeric)\n        rankmat[,2:3] <- apply(rankmat[,2:3],2,rank)\n        rankmat[,2:3] <- apply(rankmat[,2:3],2,function(x){nrow(rankmat) + 1 - x})\n        \n        #       ccrank <- rbind(ccrank,cbind(Possession = pn,rankmat[rankmat[,1]==cc,]))\n        ccrank <- rankmat\n      }\n      \n      if(is.null(ccrank)){\n        plot(c(1,1),type=\"n\",main=\"Orignal vs Modelled ranking\",ylab=\"\",xlab=\"\",yaxt='n',xaxt='n')\n        text(x=1.5,y=1,labels = \"No Original Data for This City\")\n      } else {\n        plot(ccrank[,c(\"Original\",\"Modelled\")],pch=20,col=\"grey70\",\n             xlim=rev(c(1,max(codeslength))),ylim=rev(c(1,max(codeslength))),main=\"Orignal vs Modelled ranking\")\n        abline(a=0,b=1,col=\"grey40\")  \n        points(ccrank[,c(\"Original\",\"Modelled\")],pch=20,col=\"grey70\",cex=1.8,\n               xlim=rev(c(1,max(codeslength))),ylim=rev(c(1,max(codeslength))))\n        points(ccrank[ccrank$CityCode %in% citycodes,c(\"Original\",\"Modelled\")],pch=20,col=emi_pal()(length(citycodes)),cex=1.8,\n               xlim=rev(c(1,max(codeslength))),ylim=rev(c(1,max(codeslength))))\n      }\n      \n      \n      # prognoziu rankingas\n      \n      ccrank2 <- c()\n      codeslength2 <- c()\n      \n      xis <- xframe\n      codeslength2 <- dim(xis)[1]\n      \n      rankmat <- data.frame(cbind(\"CityCode\" = xis[,\"CityCode\"],\"2014\" = xis[,\"2014\"],\"2030\" = xis[,\"2030\"]),stringsAsFactors=F,check.names=F)\n      rankmat[,2:3] <- apply(rankmat[,2:3],2,as.numeric)\n      rankmat[,2:3] <- apply(rankmat[,2:3],2,rank)\n      rankmat[,2:3] <- apply(rankmat[,2:3],2,function(x){nrow(rankmat) + 1 - x})\n      \n      \n      plot(rankmat[,c(\"2014\",\"2030\")],pch=20,col=cola[ccrank2$Possession],\n           xlim=rev(c(1,max(codeslength2))),ylim=rev(c(1,max(codeslength2))),main=\"2014 vs 2030 forecasts ranking\")\n      abline(a=0,b=1,col=\"grey40\")  \n      points(rankmat[,c(\"2014\",\"2030\")],pch=20,col=\"grey70\",cex=1.8,\n             xlim=rev(c(1,max(codeslength2))),ylim=rev(c(1,max(codeslength2))))  \n      points(rankmat[rankmat$CityCode %in% citycodes,c(\"2014\",\"2030\")],pch=20,col=emi_pal()(length(citycodes)),cex=1.8,\n             xlim=rev(c(1,max(codeslength2))),ylim=rev(c(1,max(codeslength2))))\n      \n      # miestu ir saliu income\n      \n      avicn <- avicity[avicity$CountryCode==cn,]\n      avicn <- avicn[,c(\"CityCode\",\"Year\",\"AI\")]\n      avicn <- dcast(avicn,CityCode ~ Year,value.var=\"AI\")\n      avicn[,-1] <- t(apply(avicn[,-1],1,function(x){\n        if(!all(is.na(x))) x <- MASplineVector(x)\n        return(x)\n      }))\n      avicno <- avicn\n      avicn <- data.frame(t(avicn[-1]))\n      names(avicn) <- avicno[,1]\n      \n      inccolour <- \"#00AED9\"\n      \n      matplotf(avicn,legend = F,stx=2005,lwd=0.8,turnoffpar = T,main=\"Average Income\",col=\"grey65\")\n      matplotf(avicn[,citycodes],add=T,turnoffpar = T,\n               lwd=3,stx=2005,legend=F,text=F)\n      if(cn %in% names(avicn)) lines(2005:2030,as.numeric(avicn[,cn]),lwd=4,lty=1)\n      \n    }\n    \n  }\n  \n  \n  dev.off()\n  \n}\n\n\n# cities.possession.graphs.grubus -----------------------------------------\n\ncities.possession.graphs.grubus.only.after.income <- function(bigdata,date=T,filename=\"\",info1=\"\",info2=\"\"){\n  \n  #   obigdata <- bigdata\n  #   oallcountries <- bigdata$CountryCode\n  #   splitmap <- unique(splitmap[,c(\"CityCode\",\"GraphGroup\",\"GraphName\")])\n  #   splitmap$GraphGroup <- paste(splitmap$GraphGroup,splitmap$GraphName,sep=\" - \")\n  # bigdata <- merge(bigdata, splitmap[,c(\"CountryCode\",\"GraphGroup\")], by=\"CountryCode\", all.x = T)\n  # bigdata$CountryCode <- bigdata$GraphGroup \n  #   \n  \n  ucp <- unique(bigdata[,c(\"CountryCode\")])\n  #   ucp <- ucp[ucp %in% tier$CityCode & !(ucp %in% bigdata$CountryCode)] # cia kad breztu tik miestus\n  \n  # ucp[780:810]\n  # 16*ccc,h=13*ccc\n  \n  pdftitle <- paste0(filename,gsub(\":\",\"-\",Sys.time()),\".pdf\")\n  \n  pdf(pdftitle,width=16 * 0.75,height=13 * 0.75)\n  print(titlepage(info1,info2,date=Sys.time(),size=15,author=\"Povilas Bockus\"))\n  \n  for(index in 1:length(ucp)){\n    #   for(index in 1:10){\n    \n    print(ucp[index])\n    cn <- ucp[index]\n    \n    bigxframe <- bigdata[bigdata$CountryCode==cn,]\n    pnlist <- unique(bigxframe$Possession)\n    \n    for(pn in pnlist){\n      print(pn)\n      \n      xframe <- bigxframe[bigxframe$Possession==pn,]\n      maintitle <- paste(cn,pn,sep=\" - \")\n      \n      xframe.g <- data.frame(t(xframe[,years]))\n      names(xframe.g) <- xframe$City\n      \n      layout(matrix(c(1,1,1,2,3,4), 2, 3, byrow = TRUE),heights = c(2.5,1))\n      \n      notcitynames <- xframe$City[!xframe$CityCode %in% tier$CityCode]\n      citynames <- xframe$City[xframe$CityCode %in% tier$CityCode]\n      citycodes <- intersect(xframe[xframe$City %in% citynames,\"CityCode\"],tier$CityCode)\n      if(length(notcitynames)==1) notcitynames <- rep(notcitynames,2)\n      if(length(citynames)==0) citynames <- setdiff(xframe$City,\"Total\")\n      if(length(citycodes)==0) citycodes <- setdiff(xframe$CityCode,cn)\n      if(length(citynames)==1) citynames <- rep(citynames,2)\n      if(length(citycodes)==1) citycodes <- rep(citycodes,2)\n      \n      matplotf(xframe.g,legend = F,abline=c(0,100),stx=2005,lty=1,turnoffpar = T,main=maintitle,text = T,col=\"white\")\n      matplotf(xframe.g[,notcitynames],legend = F,stx=2005,lty=1,turnoffpar = T,add=T,col=\"grey70\")\n      matplotf(xframe.g[,citynames],legend = F,abline=c(0,100),stx=2005,lty=1,turnoffpar = T,main=maintitle,text = T,add=T,lwd=2)\n      lines(2005:2030,xframe.g[,\"Total\"],lwd=4)\n      \n      \n      \n      cola <- emi_pal()(nrow(xframe))\n      names(cola) <- xframe$CityCode\n      \n      # w(w=17,h=12)\n      \n      \n      # originaliu duomenu rankingas\n      \n      plot(1, type=\"n\", axes=F, xlab=\"\", ylab=\"\")\n      \n      #       years2 <- as.character(2005:2020)\n      #       ccrank <- c()\n      #       codeslength <- c()\n      #       \n      #       \n      #       his <- hp[hp$CountryCode==cn & hp$ProductName==pn,]\n      #       xis <- xframe\n      #       codes <- intersect(xis$CityCode,his$RegionCode)  \n      #       codeslength <- length(codes)\n      #       \n      #       if(length(codes)==0 | !cc %in% codes) ccrank <- NULL else {\n      #         \n      #         his <- arrange(his[his$RegionCode %in% codes,c(\"RegionCode\",years2)],RegionCode)\n      #         xis <- arrange(xis[xis$CityCode %in% codes,c(\"CityCode\",years2)],CityCode)\n      #         \n      #         xis[which(is.na(his),arr.ind = T)] <- NA\n      #         \n      #         rankmat <- data.frame(cbind(CityCode = xis[,1],Original = apply(his[,-1],1,function(x){mean(x,na.rm=T)}),\n      #                                     Modelled = apply(xis[,-1],1,function(x){mean(x,na.rm=T)})),stringsAsFactors=F)\n      #         rankmat[,2:3] <- apply(rankmat[,2:3],2,as.numeric)\n      #         rankmat[,2:3] <- apply(rankmat[,2:3],2,rank)\n      #         rankmat[,2:3] <- apply(rankmat[,2:3],2,function(x){nrow(rankmat) + 1 - x})\n      #         \n      #         #       ccrank <- rbind(ccrank,cbind(Possession = pn,rankmat[rankmat[,1]==cc,]))\n      #         ccrank <- rankmat\n      #       }\n      #       \n      #       if(is.null(ccrank)){\n      #         plot(c(1,1),type=\"n\",main=\"Orignal vs Modelled ranking\",ylab=\"\",xlab=\"\",yaxt='n',xaxt='n')\n      #         text(x=1.5,y=1,labels = \"No Original Data for This City\")\n      #       } else {\n      #         plot(ccrank[,c(\"Original\",\"Modelled\")],pch=20,col=\"grey70\",\n      #              xlim=rev(c(1,max(codeslength))),ylim=rev(c(1,max(codeslength))),main=\"Orignal vs Modelled ranking\")\n      #         abline(a=0,b=1,col=\"grey40\")  \n      #         points(ccrank[,c(\"Original\",\"Modelled\")],pch=20,col=\"grey70\",cex=1.8,\n      #                xlim=rev(c(1,max(codeslength))),ylim=rev(c(1,max(codeslength))))\n      #         points(ccrank[ccrank$CityCode %in% citycodes,c(\"Original\",\"Modelled\")],pch=20,col=emi_pal()(length(citycodes)),cex=1.8,\n      #                xlim=rev(c(1,max(codeslength))),ylim=rev(c(1,max(codeslength))))\n      #       }\n      \n      \n      # prognoziu rankingas\n      \n      ccrank2 <- c()\n      codeslength2 <- c()\n      \n      xis <- xframe\n      codeslength2 <- dim(xis)[1]\n      \n      rankmat <- data.frame(cbind(\"CityCode\" = xis[,\"CityCode\"],\"2014\" = xis[,\"2014\"],\"2030\" = xis[,\"2030\"]),stringsAsFactors=F,check.names=F)\n      rankmat[,2:3] <- apply(rankmat[,2:3],2,as.numeric)\n      rankmat[,2:3] <- apply(rankmat[,2:3],2,rank)\n      rankmat[,2:3] <- apply(rankmat[,2:3],2,function(x){nrow(rankmat) + 1 - x})\n      \n      \n      plot(rankmat[,c(\"2014\",\"2030\")],pch=20,col=cola[ccrank2$Possession],\n           xlim=rev(c(1,max(codeslength2))),ylim=rev(c(1,max(codeslength2))),main=\"2014 vs 2030 forecasts ranking\")\n      abline(a=0,b=1,col=\"grey40\")  \n      points(rankmat[,c(\"2014\",\"2030\")],pch=20,col=\"grey70\",cex=1.8,\n             xlim=rev(c(1,max(codeslength2))),ylim=rev(c(1,max(codeslength2))))  \n      points(rankmat[rankmat$CityCode %in% citycodes,c(\"2014\",\"2030\")],pch=20,col=emi_pal()(length(citycodes)),cex=1.8,\n             xlim=rev(c(1,max(codeslength2))),ylim=rev(c(1,max(codeslength2))))\n      \n      # miestu ir saliu income\n      \n      avicn <- avicity[avicity$CountryCode==cn,]\n      avicn <- avicn[,c(\"CityCode\",\"Year\",\"AI\")]\n      avicn <- dcast(avicn,CityCode ~ Year,value.var=\"AI\")\n      avicn[,-1] <- t(apply(avicn[,-1],1,function(x){\n        if(!all(is.na(x))) x <- MASplineVector(x)\n        return(x)\n      }))\n      avicno <- avicn\n      avicn <- data.frame(t(avicn[-1]))\n      names(avicn) <- avicno[,1]\n      \n      inccolour <- \"#00AED9\"\n      \n      matplotf(avicn,legend = F,stx=2005,lwd=0.8,turnoffpar = T,main=\"Average Income\",col=\"grey65\")\n      matplotf(avicn[,citycodes],add=T,turnoffpar = T,\n               lwd=3,stx=2005,legend=F,text=F)\n      if(cn %in% names(avicn)) lines(2005:2030,as.numeric(avicn[,cn]),lwd=4,lty=1)\n      \n    }\n    \n  }\n  \n  \n  dev.off()\n  \n}\n\n\n\n\n\n\n# cities.possession.graphs.grubus -----------------------------------------\n\naverage.income.graphs.grubus <- function(bigdata,date=T,filename=\"\",info1=\"\",info2=\"\"){\n  \n  ucp <- unique(bigdata[,c(\"CountryCode\")])\n  #   ucp <- ucp[ucp %in% tier$CityCode & !(ucp %in% bigdata$CountryCode)] # cia kad breztu tik miestus\n  \n  # ucp[780:810]\n  # 16*ccc,h=13*ccc\n  \n  pdftitle <- paste0(filename,gsub(\":\",\"-\",Sys.time()),\".pdf\")\n  \n  pdf(pdftitle,width=16 * 0.75,height=10 * 0.75)\n  print(titlepage(info1,info2,date=Sys.time(),size=15,author=\"Povilas Bockus\"))\n  \n  for(index in 1:length(ucp)){\n    #   for(index in 1:10){\n    \n    print(ucp[index])\n    cn <- ucp[index]\n    \n    bigxframe <- bigdata[bigdata$CountryCode==cn,]\n    citycodes <- bigxframe$CityCode[bigxframe$CityCode %in% tier$CityCode]  \n    \n    avicn <- avicity[avicity$CountryCode==cn,]\n    #     nnames <- unique(avicn$City)\n    \n    avicn <- avicn[,c(\"CityCode\",\"City\",\"Year\",\"AI\")]\n    avicn <- dcast(avicn,CityCode + City ~ Year,value.var=\"AI\")\n    avicn[,-1:-2] <- t(apply(avicn[,-1:-2],1,function(x){\n      if(!all(is.na(x))) x <- MASplineVector(x)\n      return(x)\n    }))\n    avicno <- avicn\n    avicn <- data.frame(t(avicn[-1:-2]))\n    names(avicn) <- avicno[,2]\n    avicn2 <- avicn\n    names(avicn2) <- avicno[,1]\n    \n    inccolour <- \"#00AED9\"\n    \n    matplotf(avicn,legend = F,stx=2005,lwd=0.8,turnoffpar = T,main=paste0(cn,\" - Average Income\"),col=\"grey65\",text=T)\n    if(ncol(data.frame(avicn2[,citycodes]))>1){\n      matplotf(avicn2[,citycodes],add=T,turnoffpar = T,\n               lwd=3,stx=2005,legend=F,text=F)\n    }\n    if(ncol(data.frame(avicn2[,citycodes]))==1){\n      matplotf(data.frame(avicn2[,citycodes]),add=T,turnoffpar = T,\n               lwd=3,stx=2005,legend=F,text=F)\n    } \n    if(cn %in% names(avicn)) lines(2005:2030,as.numeric(avicn2[,cn]),lwd=4,lty=1)\n    \n  }\n  \n  \n  dev.off()\n  \n}\n\n\n\n\n# cities.possession.graphs.grubus -----------------------------------------\n\nabq.summary.graphs.grubus <- function(kof,date=T,filename=\"\",info1=\"\",info2=\"\"){\n  \n  ucp <- unique(kof[,c(\"CountryCode\")])\n  #   ucp <- ucp[ucp %in% tier$CityCode & !(ucp %in% bigdata$CountryCode)] # cia kad breztu tik miestus\n  \n  # ucp[780:810]\n  # 16*ccc,h=13*ccc\n  \n  pdftitle <- paste0(filename,gsub(\":\",\"-\",Sys.time()),\".pdf\")\n  \n  pdf(pdftitle,width=16 * 0.75,height=12 * 0.75)\n  print(titlepage(info1,info2,date=Sys.time(),size=15,author=\"Povilas Bockus\"))\n  \n  for(index in 1:length(ucp)){\n    \n    print(ucp[index])\n    cn <- ucp[index]\n    \n    bigxframe <- kof[kof$CountryCode==cn,]\n    \n    layout(matrix(c(1,2,3,4), 2, 2, byrow = TRUE))\n    \n    # average \n    \n    avg.vector <- ddply(bigxframe,~CityCode,function(x){\n      x<<-x\n      print(as.character(x$CityCode[1]))\n      ttt <- b.converter.reverse(x[,\"a\"],x[,\"b.cntUSD\"],x[,\"q\"])\n      out <- data.frame(cbind(x[,1:4],AI=ttt),check.names=F,stringsAsFactors=F)\n      return(out)\n    })\n    \n    avg.vector <- dcast(avg.vector,CityCode + City + CountryCode ~ Year,value.var=\"AI\")\n    avg.vector.o <- avg.vector\n    avg.vector <- data.frame(t(avg.vector[,years]))\n    names(avg.vector) <- avg.vector.o$City\n    \n    matplotf(avg.vector,legend = F,stx=2005,lwd=0.8,turnoffpar = T,main=paste0(cn,\" - Average Income\"),text=T)\n    if(cn %in% avg.vector.o$CityCode) lines(2005:2030,as.numeric(avg.vector.o[avg.vector.o$CityCode==cn,years]),lwd=4,lty=1)\n    \n    # median income\n    \n    median.vector <- ddply(bigxframe,~CityCode,function(x){\n      x<<-x\n      print(as.character(x$CityCode[1]))\n      m <- c()\n      for(y in 1:length(years)){m[y] <- qsm(0.5,as.numeric(x[y,c(\"a\",\"b.cntUSD\",\"q\")]))}\n      ttt <- m\n      out <- data.frame(cbind(x[,1:4],Median=ttt),check.names=F,stringsAsFactors=F)\n      return(out)\n    })\n    \n    median.vector <- dcast(median.vector,CityCode + City + CountryCode ~ Year,value.var=\"Median\")\n    median.vector.o <- median.vector\n    median.vector <- data.frame(t(median.vector[,years]))\n    names(median.vector) <- median.vector.o$City\n    \n    matplotf(median.vector,legend = F,stx=2005,lwd=0.8,turnoffpar = T,main=paste0(cn,\" - Median Income\"),text=T)\n    if(cn %in% median.vector.o$CityCode) lines(2005:2030,as.numeric(median.vector.o[median.vector.o$CityCode==cn,years]),lwd=4,lty=1)\n    \n    \n    \n    # Mode income\n    \n    mode.vector <- ddply(bigxframe,~CityCode,function(x){\n      x<<-x\n      print(as.character(x$CityCode[1]))\n      m <- c()\n      for(y in 1:length(years)){m[y] <- modesm(as.numeric(x[y,c(\"a\",\"b.cntUSD\",\"q\")]))}\n      ttt <- m\n      out <- data.frame(cbind(x[,1:4],Mode=ttt),check.names=F,stringsAsFactors=F)\n      return(out)\n    })\n    \n    mode.vector <- dcast(mode.vector,CityCode + City + CountryCode ~ Year,value.var=\"Mode\")\n    mode.vector.o <- mode.vector\n    mode.vector <- data.frame(t(mode.vector[,years]))\n    names(mode.vector) <- mode.vector.o$City\n    \n    matplotf(mode.vector,legend = F,stx=2005,lwd=0.8,turnoffpar = T,main=paste0(cn,\" - Mode Income\"),text=T)\n    if(cn %in% mode.vector.o$CityCode) lines(2005:2030,as.numeric(mode.vector.o[mode.vector.o$CityCode==cn,years]),lwd=4,lty=1)\n    \n    \n    #all in one\n    \n    matplotf(avg.vector,legend = F,stx=2005,lwd=0.8,turnoffpar = T,main=paste0(cn,\" - All in One\"),text=F,col=\"dodgerblue4\",abline=range(rbind(avg.vector,median.vector,mode.vector)))\n    if(cn %in% avg.vector.o$CityCode) lines(2005:2030,as.numeric(avg.vector.o[avg.vector.o$CityCode==cn,years]),lwd=5,lty=1,col=\"blue\")\n    \n    matplotf(median.vector,legend = F,stx=2005,lwd=0.8,turnoffpar = T,main=paste0(cn,\" - Median Income\"),text=F,col=\"firebrick3\",add=T)\n    if(cn %in% median.vector.o$CityCode) lines(2005:2030,as.numeric(median.vector.o[median.vector.o$CityCode==cn,years]),lwd=5,lty=1,col=\"red\")\n    \n    matplotf(mode.vector,legend = F,stx=2005,lwd=0.8,turnoffpar = T,main=paste0(cn,\" - Mode Income\"),text=F,col=\"goldenrod\",add=T)\n    if(cn %in% mode.vector.o$CityCode) lines(2005:2030,as.numeric(mode.vector.o[mode.vector.o$CityCode==cn,years]),lwd=5,lty=1,col=\"orange\")\n    \n    legend(\"topleft\",col=c(\"dodgerblue4\",\"firebrick3\",\"goldenrod\"),lty=1,legend=c(\"Average\",\"Median\",\"Mode\"),cex=0.5)\n    \n    abline(h=range(rbind(avg.vector,median.vector,mode.vector)),col=\"white\")\n    \n  }\n  dev.off()\n  \n}\n\n\n\n# original.data.barplots --------------------------------------------------\n\noriginal.data.barplots <- function(hp,avicity,date=T,filename=\"\",info1=\"\",info2=\"\"){\n  \n  \n  pdftitle <- paste0(filename,gsub(\":\",\"-\",Sys.time()),\".pdf\")\n  \n  pdf(pdftitle,width=16 * 0.75,height=13 * 0.75)\n  print(titlepage(info1,info2,date=Sys.time(),size=15,author=\"Povilas Bockus\"))\n  \n  \n  for(cn in sort(unique(hp$CountryCode))){\n    print(cn)\n    \n    #     avis <- avicity[avicity$CountryCode==cn,]\n    #     avis <- ddply(avis,~CityCode + City,function(x){mean(x$AI)})\n    \n    his <- hp[hp$CountryCode==cn,]\n    ohis <- his\n    #     notnayears <- years2[apply(his[,years2],2,function(x){!all(is.na(x))})]\n    \n    his <- cbind(his,meanvalue=apply(his[,years2],1,function(x){mean(x,na.rm=T)}))\n    his <- his[,c(\"RegionCode\",\"CountryName\",\"ProductName\",\"meanvalue\")]\n    \n    #     avis <- arrange(avis,CityCode)\n    his <- arrange(his,RegionCode)\n    \n    histemplate <- unique(his[,c(\"RegionCode\",\"CountryName\")])\n    \n    ###\n    \n    n <- length(unique(his$ProductName)) + 2\n    if(n %in% 1:3) nnrow <- 1\n    if(n %in% 4:6) nnrow <- 2\n    if(n %in% 7:12) nnrow <- 3\n    if(n %in% 13:20) nnrow <- 4\n    if(n %in% 21:30) nnrow <- 5\n    if(n %in% 31:42) nnrow <- 6\n    if(n %in% 43:56) nnrow <- 7\n    if(n > 56) nnrow <- 8\n    \n    \n    #     par(mfrow=c(nnrow,ceiling(n/nnrow)))\n    \n    ###  \n    \n    #     colinc <- rep(\"firebrick2\",dim(avis)[1])\n    #     colinc[which(avis[,1]==cn)] <- \"darkred\"\n    #     colinc[substr(avis$CityCode,1,1)==\"R\" & !is.na(as.numeric(substr(avis$CityCode,2,2)))] <- \"darkorange\"\n    #     \n    #     barplot(avis[,3],names.arg = avis[,2],col=colinc, las=3,main=paste(cn,\"Average Income\",sep=\" - \"),cex.names=0.4)\n    #     abline(h=avis[,3][which(avis[,1]==cn)],col=\"darkred\",lwd=2)\n    #     abline(h=c(0),col=\"grey60\",lty=2)\n    #     \n    \n    for(pn in unique(his$ProductName)){\n      \n      notnayears <- years2[apply(ohis[ohis$ProductName==pn,years2],2,function(x){!all(is.na(x))})]\n      \n      hhis <- his[his$ProductName==pn,c(\"RegionCode\",\"meanvalue\")]\n      #       hhisx <- avis\n      hhisx <- histemplate\n      \n      hhisx <- merge(hhisx,hhis,by.x=\"RegionCode\",by.y=\"RegionCode\",all.x=T)\n      astosttotal <- mean(as.numeric(rposout[rposout$CountryCode==cn & rposout$CityCode==cn & rposout$Possession==pn,notnayears]))\n      hhisx <- data.frame(rbind(c(paste(cn,\"Astos\"),paste(cn,\"Astos\"),astosttotal),hhisx))\n      hhisx$meanvalue <- as.numeric(hhisx$meanvalue)\n      \n      colinc2 <- rep(\"#FAA537\",dim(hhisx)[1]+1)\n      colinc2[which(hhisx[,1]==cn)] <- \"darkblue\"\n      colinc2[which(hhisx[,1]==paste(cn,\"Astos\"))] <- \"dodgerblue2\"\n      colinc2[substr(hhisx$RegionCode,1,1)==\"R\" & !is.na(as.numeric(substr(hhisx$RegionCode,2,2)))] <- \"chartreuse3\"\n      colinc2[which(hhisx$meanvalue > 100 | hhisx$meanvalue < 0)] <- \"red\"\n      \n      ylimas <- c(min(c(0,hhisx$meanvalue),na.rm=T),max(c(100,hhisx$meanvalue),na.rm=T))\n      \n      par(mar=c(9, 4, 4, 2) + 0.1)\n      barplot(hhisx[,\"meanvalue\"],names.arg = hhisx[,2],col=colinc2, las=3,main=paste(cn,pn,sep=\" - \"),ylim=ylimas,cex.names=0.8)\n      abline(h=hhisx[,\"meanvalue\"][which(hhisx[,1]==paste(cn,\"Astos\"))],col=\"dodgerblue2\",lwd=2)\n      abline(h=hhisx[,\"meanvalue\"][which(hhisx[,1]==cn)],col=\"darkblue\",lwd=2)\n      abline(h=c(0,100),col=\"grey60\",lty=2)\n      \n    }\n    \n    #     plot.new()\n    #     legend(\"topleft\",legend=paste(hhisx[,1],hhisx[,2],sep=\" - \"),cex=1)\n    \n    \n  }\n  dev.off()\n  \n}\n\n\n\nlastinput <- function(dirname){\n  files <- dir(dirname)\n  out <- files[which.max(as.numeric(gsub(\"\\\\D\",\"\",files)))]\n  cat(paste0(\"Loading: \",paste0(dirname,\"/\",out)),\"\\n\")\n  return(paste0(dirname,\"/\",out))\n}\n\n\nmodesm <- function(theta,n=1000){ \n  arg <- seq(0,theta[2]*4,length.out=n)\n  return(arg[which.max(dsm(arg,theta))]) \n}\n\n\nposfun.reverse <- function(x){\n  y <- splinefun(pframe,method = \"monoH.FC\")(x)\n  return(y)\n}\n\n\n\n\n\n\nmono.pos <- function(out,tot,...){\n  \n  ratio <- out/tot\n  ratio <- sm(ratio,df=length(ratio)*0.7,plot=F)\n  out <- ratio * tot\n  \n  way <- NULL\n  if(sum(diff(tot)>0)>=sum(diff(tot)<0)) way  <- \"up\" else way <- \"down\"\n  \n  if(way == \"down\"){\n    break.point <- max(which(diff(tot) > 0) + 1)\n    if(break.point!=-Inf){\n      out[-1:-break.point] <- mv(out[-1:-break.point],way=way,...)\n    } else {\n      out <- mv(out,way=way,...)\n    }\n  } \n  \n  if(way == \"up\"){\n    break.point <- max(which(diff(tot) < 0) + 1)\n    if(break.point!=-Inf){\n      out[-1:-break.point] <- mv(out[-1:-break.point],way=way,...)\n    } else {\n      out <- mv(out,way=way,...)\n    }\n  } \n  \n  return(out)\n}\n\n\n\n\n\n# cities.possession.graphs.grubus -----------------------------------------\n\ncities.possession.graphs.grubus.tik.miestai.split <- function(bigdata,splitmap,date=T,filename=\"\",info1=\"\",info2=\"\"){\n  \n  obigdata <- bigdata\n  bigdata <- bigdata[bigdata$CityCode %in% splitmap$CityCode,]\n  \n  \n  ucp <- as.character(unique(splitmap[,c(\"GraphGroup\")]))\n  #   ucp <- ucp[ucp %in% tier$CityCode & !(ucp %in% bigdata$CountryCode)] # cia kad breztu tik miestus\n  \n  # ucp[780:810]\n  # 16*ccc,h=13*ccc\n  \n  pdftitle <- paste0(filename,gsub(\":\",\"-\",Sys.time()),\".pdf\")\n  \n  pdf(pdftitle,width=16 * 0.8,height=13 * 0.7)\n  print(titlepage(info1,info2,date=Sys.time(),size=15,author=\"Povilas Bockus\"))\n  \n  for(index in 1:length(ucp)){\n    #   for(index in 1:10){\n    \n    print(ucp[index])\n    cn <- ucp[index]\n    \n    citiessplit <- as.character(splitmap[splitmap$GraphGroup %in% cn,\"CityCode\"])\n    grname <- as.character(splitmap[splitmap$GraphGroup %in% cn,\"GraphName\"][1])\n    \n    bigxframe <- bigdata[bigdata$CityCode %in% citiessplit,]\n    bigxframeall <- bigdata[bigdata$CountryCode == bigxframe$CountryCode[1],]\n    \n    pnlist <- unique(bigxframe$Possession)\n    \n    for(pn in pnlist){\n      print(pn)\n      \n      xframe <- bigxframe[bigxframe$Possession==pn,]\n      \n      maintitle <- paste(cn,grname,pn,sep=\" - \")\n      \n      xframe.g <- data.frame(t(xframe[,years]))\n      names(xframe.g) <- xframe$City\n      \n      \n      xframeall <-  bigxframeall[bigxframeall$Possession==pn,]     \n      matplotf(t(xframeall[,years]),legend = F,abline=c(0,100),stx=2005,lty=1,turnoffpar = T,main=maintitle,text = F,col=\"grey90\")\n      \n      matplotf(xframe.g,legend = F,abline=c(0,100),stx=2005,lty=1,turnoffpar = T,main=maintitle,text = T,add=T)\n      lines(2005:2030,xframe.g[,\"Total\"],lwd=4)    \n      \n    }\n    \n  }\n  \n  \n  dev.off()\n  \n}\n\n\n\n\nadd.cities.which.are.equal.to.countries <- function(cc,citycode,cityname,pd,rposout){\n  \n  xframe <- pd[pd$CountryCode==cc,]\n  \n  xframe <- ddply(xframe,~ CountryCode + Possession,function(x){\n    x <<- x\n    # })\n    cat(paste0(\"Calculating Country Totals: \",x$CountryCode[1]),\"\\n\")\n    out <- x[1,]\n    out[,c(\"CityCode\",\"City\")] <- rep(\"Total\",2)\n    out[years] <- ddply(pd[pd$CountryCode==out$CountryCode & pd$Possession==out$Possession,c(\"Year\",\"est.Pos.norm\")],\n                        ~Year,function(y){mean(y[,\"est.Pos.norm\"])})$V1\n    out$CityCode <- out$CountryCode\n    return(out)\n  })\n  \n  xframe <- data.frame(cbind(Possession = xframe$Possession,CountryCode = xframe$CountryCode, CityCode = citycode,\n                             City = cityname, xframe[,years],ProductID = xframe$ProductID),check.names=F)\n  \n  xframe <- xframe[xframe$ProductID %in% unique(rposout$ProductID),]\n  return(xframe)\n  \n}\n\n\n\n# compare2data.frames -----------------------------------------------------\n\ncompare2data.frames <- function(xframe.new,xframe.old,datayears = as.character(2005:2030)){\n  \n  id.name.new <- names(xframe.new)[-which(names(xframe.new) %in% datayears)]\n  id.name.old <- names(xframe.old)[-which(names(xframe.old) %in% datayears)]\n  \n  xframe.new <- cbind(xframe.new,key = apply(xframe.new[,id.name.new],1,function(x){paste(x,collapse = \"-\")}))\n  xframe.old <- cbind(xframe.old,key = apply(xframe.old[,id.name.old],1,function(x){paste(x,collapse = \"-\")}))\n  \n  if(all(xframe.new$key %in% xframe.old$key) & all(xframe.old$key %in% xframe.new$key)){\n    print(\"Data Frames can be compared\")\n  }\n  \n  xframe.new <- arrange(xframe.new,key)\n  xframe.old <- arrange(xframe.old,key)\n  \n  ratioframe <- xframe.new\n  \n  ratioframe[,datayears] <- round(xframe.new[,datayears]/xframe.old[,datayears],5)\n  changedframe <- which(ratioframe[,datayears]!=1,arr.ind = T)\n  changedframe <- unique(changedframe[,1])\n  \n  outframe <- rbind(cbind(Version = \"New\",xframe.new[changedframe,]),\n        cbind(Version = \"Old\",xframe.old[changedframe,]))\n  \n  return(outframe)\n\n}\n\n\n####city orginalaus tasko (ratio regiono ir city) radimas kai turime salies possessions by decile ir income bei regiono orginalu taska\n## 1. issibreziam total salies kreive (x asis - income by decile, y-possessions by decile), metu, kuriu orginalu taska mes turim\n## 2. pasiimame regional orginalu taska ir randame \"jo pajamas\" ant 1. kreives\n## 3. randam ratio tarp is abqUSD isskaiciuotu tu metu vidutiniu regiono ir miesto pajamu\n## 4. ta ratio pritaikom fiktyviom regiono pajamom (2. punktas) ir gaunam fiktyvias miesto pajamas\n## 5. pagal fiktyvias miesto pajamas ir total kreive (1. punktas) randam \"orginalu city taska\", \n##    prie kurio veliau pritraukinesim nauja is income gauta possessions kreive\n## 6. ratio.out - (tam tikru metu pos city (suskaiciuotas naudojantis regional org.))/regional orig\nfromIncomePossessionCurve <- function(city, cc, pn , rposout, hp, abqUSD, final.pbd, hp.cc, inc.cc){\n  \n#   hp.cc <- hp[hp$CountryCode==cc & hp$ProductName==pn,]\n#   inc.cc <- rposout[rposout$CountryCode==cc & rposout$Possession==pn,]\n  year <- apply(hp.cc[,as.character(2000:2020)], 2, function(x){any(!is.na(x)) })\n  year <- names(year[which(year==T)])\n  year <- year[length(year)]\n  \n  if (length(year)==0){\n    ratio.out=NA\n    return.out(ratio.out)\n    break\n  }\n  \n  #is income sumodeliuoti regioniniai duomenys pritempiami prie orginaliu\n  out <- NULL\n  for (i in unique(inc.cc$CityCode)){\n    \n    s <- subset(inc.cc, CityCode==i)\n    if (substr(i, 1, 2) %in% c(\"R0\", \"R1\", \"R2\", \"R3\", \"R4\", \"R5\", \"R6\", \"R7\", \"R8\", \"R9\")){\n      \n      hpsh <- hp.cc[hp.cc$RegionCode==i,]\n      hpsh <- melt(hpsh, id=c(\"RegionCode\", \"Region/CityName\", \"CountryName\", \"CountryCode\", \"ProductID\", \"ProductName\", \"Unit\"))\n      \n      if (any(!is.na(hpsh$value))){\n        point <- nrow(hpsh[!is.na(hpsh$value),])\n        value <- hpsh[!is.na(hpsh$value),][point,]$value\n        skirt <- value/eval(parse(text=paste0(\"s$`\", year, \"`\")))\n        s[,as.character(2005:2030)] <- s[,as.character(2005:2030)]*skirt\n        out <- rbind(s, out)\n      }\n    }\n  }\n  \n  if (length(out)!=0){\n    \n    income.pos <- final.pbd[final.pbd$CountryCode==cc & final.pbd$Possession==pn & final.pbd$Year==year,]\n    income.pos <- income.pos[order(income.pos$Decile.No),]\n    income.pos <- income.pos[, c(\"est.Pos.norm\", \"Average.income\")]\n    \n    # plot(income.pos$Average.income, income.pos$est.Pos.norm, type=\"o\")\n    # points(income.pos$Average.income, income.pos$est.Pos.norm, col=\"red\")\n    \n    #suskaciuojam nauja city lygi ir prie jo pritempiam is miestu income gautas possession kreives\n    new.city <- NULL\n    \n    s <- subset(inc.cc, CityCode==city)\n    \n    reg <- as.character(city.codes[city.codes$CityCode==city,]$RegionCode)\n    reg <- substr(reg, 1,4)\n    pos.reg <- out[out$CityCode==reg,year]\n    inc.reg <- mean(sm.tft(as.numeric(abqUSD[abqUSD$CityCode==reg & abqUSD$Year==year, c(\"a\", \"b.cntUSD\", \"q\")])))\n    inc.city <- mean(sm.tft(as.numeric(abqUSD[abqUSD$CityCode==city & abqUSD$Year==year, c(\"a\", \"b.cntUSD\", \"q\")])))\n    ratio <- inc.city/inc.reg\n    \n    if (round(ratio, 3)==1){\n      \n      s[,as.character(2005:2030)] <- out[out$CityCode==reg,as.character(2005:2030)]\n      ratio.out <- 1\n    }else{\n      \n      income.pos1 <- rbind(income.pos, data.frame(est.Pos.norm=c(pos.reg), Average.income=c(NA)))\n      income.pos1 <- income.pos1[order(income.pos1$est.Pos.norm),]\n      \n      if (is.na(income.pos1$Average.income[nrow(income.pos1)]) | is.na(income.pos1$Average.income[1]) |\n          (!(all(income.pos$est.Pos.norm==sort(income.pos$est.Pos.norm)))  & \n          (!all(income.pos$est.Pos.norm==sort(income.pos$est.Pos.norm, decreasing = T))))){\n        \n        ratio.out <- NA\n      }else{\n        \n        x1 <- income.pos1[which(is.na(income.pos1$Average.income))-1,]$Average.income\n        x2 <- income.pos1[which(is.na(income.pos1$Average.income))+1,]$Average.income\n        y1 <- income.pos1[which(is.na(income.pos1$Average.income))-1,]$est.Pos.norm\n        y2 <- income.pos1[which(is.na(income.pos1$Average.income))+1,]$est.Pos.norm\n        k <- (y1-y2)/(x1-x2)\n        b <- y2-x2*(y1-y2)/(x1-x2)\n        \n        inc.reg.f <- (pos.reg-b)/k\n        inc.city.f <- ratio*inc.reg.f\n        \n        if (min(income.pos$Average.income)>inc.city.f){\n          \n          pos.city <- min(income.pos$est.Pos.norm)\n        }else{\n        \n          income.pos2 <- rbind(income.pos, data.frame(est.Pos.norm=c(NA), Average.income=c(inc.city.f)))\n          income.pos2 <- income.pos2[order(income.pos2$Average.income),]\n          x1 <- income.pos2[which(is.na(income.pos2$est.Pos.norm))-1,]$Average.income\n          x2 <- income.pos2[which(is.na(income.pos2$est.Pos.norm))+1,]$Average.income\n          y1 <- income.pos2[which(is.na(income.pos2$est.Pos.norm))-1,]$est.Pos.norm\n          y2 <- income.pos2[which(is.na(income.pos2$est.Pos.norm))+1,]$est.Pos.norm\n          \n          if (is.na(x2)){\n            x2 <- income.pos2[which(is.na(income.pos2$est.Pos.norm))-2,]$Average.income\n            y2 <- income.pos2[which(is.na(income.pos2$est.Pos.norm))-2,]$est.Pos.norm\n          }\n          \n          k <- (y1-y2)/(x1-x2)\n          b <- y2-x2*(y1-y2)/(x1-x2)\n          \n          #pos.city naujas pos tam tikriems metams pritraukus prie regiono orginaliu\n          pos.city <- b+k*inc.city.f\n        }\n        \n        ratio.out <- pos.city/pos.reg \n      }\n    }\n  }else{\n    \n    ratio.out <- NA\n  }\n  \n  return(ratio.out)\n}\n\n\n# sarasas, tokiu atveju, kur pavertus absoliuciomis reiksmemis \n# susumuoti miestu possession of durables virsija salies possession of durables\n\nlist.cities.surpass.country <- function(hh, rposout){\n  \n  rposout <- rposout[!(substr(rposout$CityCode, 1, 2) %in% paste0(\"R\", c(0:9))),]\n  \n  hh <- hh[,c(\"CityCode\", \"ParentCountryCode\", paste0(\"Y\", 2005:2030))]\n  hh <- rename(hh, c(ParentCountryCode=\"CountryCode\"))\n  hh[hh$CityCode==\"\",]$CityCode <- hh[hh$CityCode==\"\",]$CountryCode\n  hh <- melt(hh,  id=c(\"CityCode\", \"CountryCode\"))\n  hh <- rename(hh, c(variable=\"Year\", value=\"hh\"))\n  hh$Year <- gsub(\"Y\", \"\", hh$Year)\n  \n  rposout <- melt(rposout, id=c(\"CountryCode\", \"CityCode\", \"City\", \"ProductID\", \"Possession\"))\n  rposout <- rename(rposout, c(variable=\"Year\", value=\"poss\"))\n  \n  rposout <- merge(rposout, hh, by=c(\"CityCode\", \"CountryCode\", \"Year\"), all.x=T)\n  head(rposout[is.na(rposout$hh),]) ##has to be empty\n  \n  rposout$hh.poss <- rposout$poss*rposout$hh/100\n  \n  n.rposout <- rposout[rposout$City==\"Total\",]\n  c.rposout <- rposout[rposout$City!=\"Total\",]\n  \n  n.rposout <- rename(n.rposout, c(poss=\"n.poss\", hh=\"n.hh\", hh.poss=\"n.hh.poss\"))\n  n.rposout <- n.rposout[,c(\"CountryCode\", \"Year\", \"ProductID\", \"n.poss\", \"n.hh\", \"n.hh.poss\")]\n  \n  c.rposout <- merge(c.rposout, n.rposout, by=c(\"CountryCode\", \"ProductID\", \"Year\"))\n  \n  out <- ddply(c.rposout, .(CountryCode, ProductID, Year, Possession), summarize, \n               city.sum= sum(hh.poss), n.hh.poss=mean(n.hh.poss))\n  \n  return (unique(out[out$city.sum>out$n.hh.poss, c(\"CountryCode\", \"Possession\", \"ProductID\")]))\n  \n}\n\n\n##taisymnas\n\nfixing.cities.surpass.country <- function(hh, rposout, plot=T){\n  \n  year <- as.character(2005:2030)\n  \n  rposout.out <- rposout\n  rposout <- rposout[!(substr(rposout$CityCode, 1, 2) %in% paste0(\"R\", c(0:9))),]\n  \n  hh <- hh[,c(\"CityCode\", \"ParentCountryCode\", paste0(\"Y\", 2005:2030))]\n  hh <- rename(hh, c(ParentCountryCode=\"CountryCode\"))\n  hh[hh$CityCode==\"\",]$CityCode <- hh[hh$CityCode==\"\",]$CountryCode\n  hh <- melt(hh,  id=c(\"CityCode\", \"CountryCode\"))\n  hh <- rename(hh, c(variable=\"Year\", value=\"hh\"))\n  hh$Year <- gsub(\"Y\", \"\", hh$Year)\n  \n  rposout <- melt(rposout, id=c(\"CountryCode\", \"CityCode\", \"City\", \"ProductID\", \"Possession\"))\n  rposout <- rename(rposout, c(variable=\"Year\", value=\"poss\"))\n  \n  rposout <- merge(rposout, hh, by=c(\"CityCode\", \"CountryCode\", \"Year\"), all.x=T)\n  head(rposout[is.na(rposout$hh),]) ##has to be empty\n  \n  rposout$hh.poss <- rposout$poss*rposout$hh/100\n  \n  n.rposout <- rposout[rposout$City==\"Total\",]\n  c.rposout <- rposout[rposout$City!=\"Total\",]\n  \n  n.rposout <- rename(n.rposout, c(poss=\"n.poss\", hh=\"n.hh\", hh.poss=\"n.hh.poss\"))\n  n.rposout <- n.rposout[,c(\"CountryCode\", \"Year\", \"ProductID\", \"n.poss\", \"n.hh\", \"n.hh.poss\")]\n  \n  c.rposout <- merge(c.rposout, n.rposout, by=c(\"CountryCode\", \"ProductID\", \"Year\"))\n  \n  out <- ddply(c.rposout, .(CountryCode, ProductID, Year, Possession), summarize, \n               city.sum= sum(hh.poss), n.hh.poss=mean(n.hh.poss))\n  \n  bad.list <- unique(out[out$city.sum>out$n.hh.poss, c(\"CountryCode\", \"Possession\", \"ProductID\")])\n  \n  corrected <- NULL\n  for (i in 1:nrow(bad.list)){\n    \n    s <- c.rposout[c.rposout$CountryCode==bad.list[i,\"CountryCode\"] & c.rposout$ProductID==bad.list[i,\"ProductID\"],]\n    \n    ss <- ddply(s, .(CountryCode, ProductID, Year), summarize,\n          city.hh=sum(hh), city.hh.poss=sum(hh.poss))  \n   \n    s <- merge(s, ss, by=c(\"CountryCode\", \"ProductID\", \"Year\"))\n    s$hh.left <- s$n.hh-s$city.hh\n    s$hh.poss.left <- s$hh.left*(s$n.poss/2)/100\n    s$new.poss <- (s$hh.poss*s$n.hh.poss)/(s$city.hh.poss+s$hh.poss.left)/s$hh*100\n    \n    if (length(s[s$new.poss>s$poss,]$new.poss)!=0){\n      \n      s[s$new.poss>s$poss,]$new.poss <- s[s$new.poss>s$poss,]$poss\n    }\n    corrected <- rbind(s, corrected)\n    \n    for (kk in unique(s$CityCode)){\n      \n      s.kk <- s[s$CityCode==kk,]\n      s.kk <- s.kk[order(s.kk$Year),]\n      rposout.out[rposout.out$CountryCode==bad.list[i,\"CountryCode\"] & \n                    rposout.out$ProductID==bad.list[i,\"ProductID\"] &\n                    rposout.out$CityCode==kk,year] <- s.kk$new.poss\n      \n    }\n    \n  }\n  \n  if (plot){\n    \n    for.graph <- corrected[,c(\"CountryCode\", \"ProductID\", \"Possession\", \"CityCode\", \"City\", \"Year\", \n                              \"n.poss\", \"poss\", \"new.poss\")]\n    \n    filename=\"plots/5.A. Forecasted possessions after norming (where was necessary)/Forecasted possessions after norming_\"\n    \n    pdftitle <- paste0(filename,gsub(\":\",\"-\",Sys.time()),\".pdf\")\n    \n    pdf(pdftitle,width=16 * 0.75,height=13 * 0.75)\n    print(titlepage(\"Forecasted possessions after norming\",date=Sys.time(),size=15,author=\"Euromonitor\"))\n    par(ps = 10, lab = c(14,10,10))\n    \n    for (i in unique(for.graph$CountryCode)){\n      \n      sg <- for.graph[for.graph$CountryCode==i,]\n      \n      for (j in unique(sg$Possession)){\n      \n        sgg <- sg[sg$Possession==j,]\n        \n        c.sgg <- dcast(sgg[,c(\"City\", \"Year\", \"poss\")], City~Year, value.var = c(\"poss\"))\n        n.sgg <- dcast(sgg[,c(\"City\", \"Year\", \"n.poss\")], City~Year, value.var = c(\"n.poss\"))[1,year]\n        new.sgg <- dcast(sgg[,c(\"City\", \"Year\", \"new.poss\")], City~Year, value.var = c(\"new.poss\"))\n        \n        matplot(c(2005:2030), t(new.sgg[,year]), lty=1, type=\"l\", lwd = 1, col=emi_pal()(nrow(new.sgg)),\n                main=paste(i, j, sep=\" - \"), xlab=c(\"Year\"), ylab=c(\"Possession\"), xlim=c(2004.5, 2030.5),\n                ylim=c(1, 100))\n        matlines(c(2005:2030), t(c.sgg[,year]), lty=2, col=emi_pal()(nrow(c.sgg)))\n        lines(c(2005:2030), t(n.sgg[,year]), col=\"black\", lwd=3)\n        grid()\n        text(rep(2030.5, nrow(new.sgg)), t(new.sgg[,year])[26,], labels=new.sgg[,1], cex=0.8, col=emi_pal()(nrow(new.sgg)))\n        text(rep(2004.5, nrow(new.sgg)), t(new.sgg[,year])[1,], labels=new.sgg[,1], cex=0.8, col=emi_pal()(nrow(new.sgg)))\n      }\n    }\n    \n    dev.off()\n  }\n  \n  return(rposout.out)\n}\n\n\nlastinput.zip <- function(dirname){\n  files <- dir(dirname)\n  out <- files[which.max(as.numeric(gsub(\"\\\\D\",\"\",files)))]\n  out2 <- gsub(\".zip\", \".csv\", out)\n  #   cat(paste0(\"Loading: \",paste0(dirname,\"/\",out)),\"\\n\")\n  paste0(\"unz(\",\"'\",dirname, \"/\", out, \"'\", \",\",\"'\", out2, \"')\")\n  return(paste0(\"unz(\",\"'\",dirname, \"/\", out, \"'\", \",\",\"'\", out2, \"')\"))\n}\n\n\nissue.smooth <- function(bt, rposout){\n  issue.sm <- bt[bt$Issue==\"smooth\",]\n  \n  for(index in 1:nrow(issue.sm)){\n    \n    x <- issue.sm[index,]\n    cn <- x$CountryCode[1]\n    pn <- x$ProductName[1]\n    city <- x$City[1]\n    \n    if(x$City == \"all\"){\n      \n      xframe <- rposout[rposout$CountryCode==x$CountryCode & rposout$Possession==x$ProductName,]\n      xframeratio <- xframe\n      tot <- as.numeric(xframe[xframe$City == \"Total\",years])\n      xframeratio[,years] <- t(apply(xframe[,years],1,function(x){x/tot}))\n      \n      matplotf(t(xframe[years]),main=paste(cn,pn,\"BEFORE\",sep=\" - \"),legend=F)\n      matplotf(t(xframeratio[years]),main=paste(cn,pn,\"BEFORE\",sep=\" - \"),legend=F)\n      \n      xframeratio[,years] <- t(apply(xframeratio[,years],1,function(x){sm(x,df=length(x)*0.5)}))\n      xframe[,years] <- t(apply(xframeratio[,years],1,function(x){x * tot}))\n      \n      matplotf(t(xframeratio[years]),main=paste(cn,pn,\"AFTER\",sep=\" - \"),legend=F)\n      matplotf(t(xframe[years]),main=paste(cn,pn,\"AFTER\",sep=\" - \"),legend=F)\n      \n      rposout[rposout$CountryCode==x$CountryCode & rposout$Possession==x$ProductName,] <- xframe\n      \n    } else {\n      \n      xframe <- rposout[rposout$CountryCode==x$CountryCode & rposout$Possession==x$ProductName & rposout$City %in% c(\"Total\",x$City),]\n      \n      xframeratio <- xframe\n      tot <- as.numeric(xframe[xframe$City == \"Total\",years])\n      xframeratio[,years] <- t(apply(xframe[,years],1,function(x){x/tot}))\n      \n      matplotf(t(xframe[years]),main=paste(cn,pn,\"BEFORE\",sep=\" - \"),legend=F,abline=c(0,100))\n      #     matplotf(t(xframeratio[years]),main=paste(cn,pn,\"BEFORE\",sep=\" - \"),legend=F)\n      \n      xframeratio[,years] <- t(apply(xframeratio[,years],1,function(x){sm(x,df=length(x)*0.5)}))\n      xframe[,years] <- t(apply(xframeratio[,years],1,function(x){x * tot}))\n      \n      #     matplotf(t(xframeratio[years]),main=paste(cn,pn,\"AFTER\",sep=\" - \"),legend=F)\n      matplotf(t(xframe[years]),main=paste(cn,pn,\"AFTER\",sep=\" - \"),legend=F,abline=c(0,100))\n      \n      rposout[rposout$CountryCode==x$CountryCode & rposout$Possession==x$ProductName & rposout$City %in% c(\"Total\",x$City),] <-  xframe\n      \n    }\n    \n  }\n  \n  return(rposout)\n}\n\n\nissue.stretch.f <- function(bt, rposout){\n  \n  issue.stretch <- bt[bt$Issue==\"stretch\",]\n  \n  for(index in 1:nrow(issue.stretch)){\n    \n    x <- issue.stretch[index,]\n    cn <- x$CountryCode[1]\n    pn <- x$ProductName[1]\n    city <- x$City[1]\n    arg <- x$arg\n    \n    citylist <- c()\n    if(city==\"all\"){\n      citylist <- unique(rposout[rposout$CountryCode==x$CountryCode,\"City\"])\n    } else {\n      citylist <- city\n    }\n    \n    for(cityname in citylist){\n      \n      xframe <- rposout[rposout$CountryCode==x$CountryCode & rposout$Possession==x$ProductName & rposout$City==cityname ,]\n      matplotf(t(xframe[years]),main=paste(\"BEFORE\",cityname),abline=c(0,100))\n      \n      xframe[,years] <- t(apply(xframe[,years],1,function(x){stretch(as.numeric(x) + seq(0,0.1,length.out=length(as.numeric(x))),x[1],arg)}))\n      matplotf(t(xframe[years]),main=paste(\"AFTER\",cityname),abline=c(0,100)) \n      rposout[rposout$CountryCode==x$CountryCode & rposout$Possession==x$ProductName & rposout$City %in% unique(xframe$City),] <- xframe\n    }\n    \n  }\n  \n  return(rposout)\n}\n\n\nissue.total.ratio.f <- function(bt,rposout){\n  \n  issue.total.ratio <- bt[bt$Issue==\"total.ratio\",]\n  \n  for(index in 1:nrow(issue.total.ratio)){\n    \n    x <- issue.total.ratio[index,]\n    arg <- x$arg\n    #   xframe <- rposout[rposout$CountryCode==x$CountryCode & rposout$Possession==x$ProductName & rposout$City==x$City ,]\n    \n    if(x$City == \"all\"){\n      \n      xframe <- rposout[rposout$CountryCode==x$CountryCode & rposout$Possession==x$ProductName ,]\n      xframe <- xframe[!xframe$City %in% c(x$CountryCode,\"Total\"),]\n      tot <- rposout[rposout$CountryCode==x$CountryCode & rposout$Possession==x$ProductName & rposout$City==\"Total\" ,]\n      \n      for(i in 1:dim(xframe)[1]){\n        ratio <- xframe[i,as.character(arg)] / tot[,as.character(arg)]\n        xframe[i,years] <- tot[,years] * ratio\n        rposout[rposout$CountryCode==x$CountryCode & rposout$Possession==x$ProductName & rposout$City==xframe$City[i],] <- xframe[i,]\n      }   \n      \n    } else {\n      \n      xframe <- rposout[rposout$CountryCode==x$CountryCode & rposout$Possession==x$ProductName & rposout$City==x$City ,]\n      if(x$CountryCode==\"IR\" & x$City==\"Isfahan\") xframe <- xframe[1,]\n      \n      tot <- rposout[rposout$CountryCode==x$CountryCode & rposout$Possession==x$ProductName & rposout$City==\"Total\" ,]\n      ratio <- xframe[,as.character(arg)] / tot[,as.character(arg)]\n      \n      matplotg(t(xframe[years]),main=\"BEFORE\")\n      \n      xframe[,years] <- tot[,years] * ratio\n      matplotg(t(xframe[years]),main=\"AFTER\") \n      rposout[rposout$CountryCode==x$CountryCode & rposout$Possession==x$ProductName & rposout$CityCode==xframe$CityCode ,] <- xframe\n      \n    }\n  }\n  \n  return(rposout)\n  \n}\n\n\ngraphs.Badthings.adjustion <- function(bt, rposout, s5.rposout, filename){\n  \n  pdftitle <- paste0(filename,gsub(\":\",\"-\",Sys.time()),\".pdf\")\n  \n  pdf(pdftitle,width=16 * 0.75,height=13 * 0.5)\n  print(titlepage(\"Bad Things\",\"Possession after Adjustion\",date=Sys.time(),size=15,author=\"Povilas Bockus\"))\n  \n  # changed graphs\n  # ucp <- unique(bt[,c(1,3,4)])\n  # ucp <- unique(bt[,c(1,2,3,4)])\n  ucp <- bt\n  ucp <- ucp[ucp$Issue!=\"dont.make.fakes\",]\n  \n  for(index in 1:nrow(ucp)){\n    print(index)\n    \n    x <- ucp[index,]\n    if(x$City==\"all\"){\n      xnew <- rposout[rposout$CountryCode==x$CountryCode[1] & rposout$Possession==x$ProductName[1],]\n      xold <- s5.rposout[s5.rposout$CountryCode==x$CountryCode[1] & s5.rposout$Possession==x$ProductName[1],]\n    } else {\n      xnew <- rposout[rposout$CountryCode==x$CountryCode[1] & rposout$Possession==x$ProductName[1] & rposout$City %in% c(\"Total\",x$City[1]),]\n      xold <- s5.rposout[s5.rposout$CountryCode==x$CountryCode[1] & s5.rposout$Possession==x$ProductName[1] & rposout$City %in% c(\"Total\",x$City[1]),]\n    }\n    \n    xnew2 <- data.frame(t(xnew[,years]))\n    xold2 <- data.frame(t(xold[,years]))\n    \n    names(xnew2) <- xnew$City\n    names(xold2) <- xold$City\n    \n    matplotf(xold2,text=T,legend=F,abline=c(0,100),stx=2005,\n             main=paste(x$CountryCode[1],x$ProductName[1],x$Issue[1],x$City[1],\"BEFORE\",sep=\" - \"))\n    lines(2005:2030,xold2$Total,lwd=3)\n    \n    matplotf(xnew2,text=T,legend=F,abline=c(0,100),stx=2005,\n             main=paste(x$CountryCode[1],x$ProductName[1],x$Issue[1],x$City[1],\"AFTER\",sep=\" - \"))\n    lines(2005:2030,xnew2$Total,lwd=3)\n    \n  }\n  \n  dev.off()\n  \n}\n\n\nmake.fakes <- function(hpregion, hp, dont.make, possession_codes){\n  \n  for(index in 1:length(hpregion)){\n    \n    rc <- as.character(hpregion[index])\n    \n    print(paste(rc,sep=\" - \"))\n    \n    his <- hp[hp$RegionCode == rc,] #paziurim, kokius turim tam miestui/regionui istorinius\n    cc <- his$CountryCode[1]\n    \n    dont.make <- dont.make.fakes[dont.make.fakes$CountryCode==cc,]\n    \n    # pc int br klasteris (2506, 59927, 87218)\n    \n    # clustID <- c(2506,59927,87218)\n    clustID <- c(59927,87218)\n    \n    if(any(clustID %in% unique(his$ProductID)) & \n       !all(clustID %in% unique(his$ProductID)) & !(\"Internet\" %in% dont.make$ProductName)){\n      \n      print(\"SOMETHING MISSING IN original: `pc int br`\")\n      \n      missID <- clustID[which(!clustID %in% unique(his$ProductID))]\n      notmissID <- clustID[which(clustID %in% unique(his$ProductID))]\n      \n      #klausimas, kodėl tik iki 2020 metų\n      fakeout <- data.frame(matrix(NA,nrow=length(missID),ncol=length(years2) + 1))\n      fakeout[,1] <- missID\n      names(fakeout) <- c(\"ProductID\",years2)\n      \n      ### Čia skirtingi variantai, žiūrint kiek duomenų trūksta, prikuriama vis skirtingai\n      \n      if(length(missID)==2){   \n        for(id in missID){\n          ratio <- rposout[(rposout$ProductID %in% notmissID) & (rposout$CityCode %in% rc),years2]/\n            rposout[(rposout$ProductID %in% id) & (rposout$CityCode %in% rc),years2]\n          fakeout[fakeout$ProductID==id,years2] <- as.numeric(hp[hp$ProductID==notmissID & hp$RegionCode==rc,years2]/ratio)  \n        }\n      }\n      \n      ### jei trūksta tik PC (bet yra šalies PC ir interneto total tarp istorinių duoemenų)\n      if(length(missID)==1 & missID==2506){\n        if(dim(hp[hp$CountryCode == cc & hp$CountryName==\"Total\" & hp$ProductID==2506,])[1]!=0 & \n           dim(hp[hp$CountryCode == cc & hp$CountryName==\"Total\" & hp$ProductID==59927,])[1]!=0){\n          #pasiima šalies santykį\n          ratio <- hp[hp$CountryCode == cc & hp$CountryName==\"Total\" & hp$ProductID==59927,years2]/\n            hp[hp$CountryCode == cc & hp$CountryName==\"Total\" & hp$ProductID==2506,years2]\n          if(sum(!is.na(ratio)) == 1) ratio <- rep(ratio[!is.na(ratio)],length(ratio))\n          ratio <- MASplineVector(ratio) #is prognozuoja ratio su moving average, \n          # jei jo truksta kuriems nors metams\n          \n          fakeout[fakeout$ProductID==missID,years2] <- as.numeric(his[his$ProductID==59927,years2])/ratio  \n          \n        } else {\n          \n          ratio <- rposout[rposout$ProductID==59927 & rposout$CityCode==rc,years2]/\n            rposout[rposout$ProductID==missID & rposout$CityCode==rc,years2]\n          fakeout[fakeout$ProductID==missID,years2] <- as.numeric(hp[hp$ProductID==59927 & hp$RegionCode==rc,years2]/ratio)  \n        }\n        \n      }\n      \n      if(length(missID)==1 & missID==59927){\n        \n        if(dim(hp[hp$CountryCode == cc & hp$CountryName==\"Total\" & hp$ProductID==2506,])[1]!=0 & \n           dim(hp[hp$CountryCode == cc & hp$CountryName==\"Total\" & hp$ProductID==59927,])[1]!=0){\n          \n          ratio <- hp[hp$CountryCode == cc & hp$CountryName==\"Total\" & hp$ProductID==2506,years2]/\n            hp[hp$CountryCode == cc & hp$CountryName==\"Total\" & hp$ProductID==59927,years2]\n          if(sum(!is.na(ratio)) == 1) ratio <- rep(ratio[!is.na(ratio)],length(ratio))\n          ratio <- MASplineVector(ratio)\n          \n          fakeout[fakeout$ProductID==missID,years2] <- as.numeric(his[his$ProductID==2506,years2])/ratio  \n          \n        } else {\n          \n          ratio <- rposout[rposout$ProductID==87218 & rposout$CityCode==rc,years2]/\n            rposout[rposout$ProductID==missID & rposout$CityCode==rc,years2]\n          fakeout[fakeout$ProductID==missID,years2] <- as.numeric(hp[hp$ProductID==87218 & hp$RegionCode==rc,years2]/ratio)  \n        }\n        \n      }\n      \n      if(length(missID)==1 & missID==87218){\n        \n        if(dim(hp[hp$CountryCode == cc & hp$CountryName==\"Total\" & hp$ProductID==87218,])[1]!=0 & \n           dim(hp[hp$CountryCode == cc & hp$CountryName==\"Total\" & hp$ProductID==59927,])[1]!=0){\n          \n          ratio <- hp[hp$CountryCode == cc & hp$CountryName==\"Total\" & hp$ProductID==59927,years2]/\n            hp[hp$CountryCode == cc & hp$CountryName==\"Total\" & hp$ProductID==87218,years2]\n          if(sum(!is.na(ratio)) == 1) ratio <- rep(ratio[!is.na(ratio)],length(ratio))\n          ratio <- MASplineVector(ratio)\n          \n          fakeout[fakeout$ProductID==missID,years2] <- as.numeric(his[his$ProductID==59927,years2])/ratio  \n          \n        } else {\n          ratio <- rposout[rposout$ProductID==59927 & rposout$CityCode==rc,years2]/\n            rposout[rposout$ProductID==missID & rposout$CityCode==rc,years2]\n          fakeout[fakeout$ProductID==missID,years2] <- as.numeric(hp[hp$ProductID==59927 & hp$RegionCode==rc,years2]/ratio)  \n          \n        }\n        \n        \n      }\n      \n      \n      \n      out <- his[rep(1,dim(fakeout)[1]),]\n      out[,names(fakeout)] <- fakeout\n      out$ProductName <- possession_codes[(match(fakeout$ProductID,possession_codes$ProductID)),\"ProductName\"]\n      out[,as.character(2000:2004)] <- NA\n      \n      hp <- rbind(hp,out)\n    }\n    \n    ### čia pabaiga tų skirtingų variantų, kurie susiję su PC\n    \n    ### tęsiam toliau kitų fake kūrimą - ctv stv cbl klasteris (2499, 12987, 12980)\n    \n    clustID2 <- c(2499,12987,12980)\n    \n    if(any(clustID2 %in% unique(his$ProductID)) & \n       !all(clustID2 %in% unique(his$ProductID)) &\n       !(\"TV\" %in% dont.make$ProductName)){\n      \n      print(\"SOMETHING MISSING IN: `ctv stv cbl`\")\n      \n      missID <- clustID2[which(!clustID2 %in% unique(his$ProductID))]\n      notmissID <- clustID2[which(clustID2 %in% unique(his$ProductID))]\n      \n      fakeout <- data.frame(matrix(NA,nrow=length(missID),ncol=length(years2) + 1))\n      fakeout[,1] <- missID\n      names(fakeout) <- c(\"ProductID\",years2)\n      \n      ###\n      \n      if(length(missID)==2){   \n        for(id in missID){\n          if(dim(rposout[rposout$ProductID==id & rposout$CityCode==rc,years2])[1]==0) next\n          ratio <- rposout[rposout$ProductID==notmissID & rposout$CityCode==rc,years2]/\n            rposout[rposout$ProductID==id & rposout$CityCode==rc,years2]\n          fakeout[fakeout$ProductID==id,years2] <- as.numeric(hp[hp$ProductID==notmissID & hp$RegionCode==rc,years2]/ratio)  \n        }\n      }\n      \n      if(length(missID)==1 & missID==2499){\n        ratio <- rposout[rposout$ProductID==12980 & rposout$CityCode==rc,years2]/\n          rposout[rposout$ProductID==missID & rposout$CityCode==rc,years2]\n        fakeout[fakeout$ProductID==missID,years2] <- as.numeric(hp[hp$ProductID==12980 & hp$RegionCode==rc,years2]/ratio)  \n      }\n      \n      if(length(missID)==1 & missID==12987){\n        if(dim(rposout[rposout$ProductID==missID & rposout$CityCode==rc,years2])[1]==0) next\n        ratio <- rposout[rposout$ProductID==12980 & rposout$CityCode==rc,years2]/\n          rposout[rposout$ProductID==missID & rposout$CityCode==rc,years2]\n        fakeout[fakeout$ProductID==missID,years2] <- as.numeric(hp[hp$ProductID==12980 & hp$RegionCode==rc,years2]/ratio)  \n      }\n      \n      if(length(missID)==1 & missID==12980){\n        if(dim(rposout[rposout$ProductID==missID & rposout$CityCode==rc,years2])[1]==0) next\n        ratio <- rposout[rposout$ProductID==12987 & rposout$CityCode==rc,years2]/\n          rposout[rposout$ProductID==missID & rposout$CityCode==rc,years2]\n        fakeout[fakeout$ProductID==missID,years2] <- as.numeric(hp[hp$ProductID==12987 & hp$RegionCode==rc,years2]/ratio)  \n      }\n      \n      ###\n      \n      out <- his[rep(1,dim(fakeout)[1]),]\n      out[,names(fakeout)] <- fakeout\n      out$ProductName <- possession_codes[(match(fakeout$ProductID,possession_codes$ProductID)),\"ProductName\"]\n      out[,as.character(2000:2004)] <- NA\n      \n      hp <- rbind(hp,out)\n    } \n    \n  }\n  \n  return(hp)\n}\n\n#sukuriam tokios strukturos final_poss_by_decile.RData naudojant naujausius poss by decile is csv file'o\n\ncreate.possessions.by.decile.RData <- function(dirname1, dirname2){\n  \n  possf <- read.csv(lastinput(dirname1), stringsAsFactors = F)\n  load(lastinput(dirname2))\n  possr <- final.pbd\n  \n  possf <- possf[,c(\"SubSector\", \"CountryCode\", \"ProductParentID\", paste0(\"X\", 2005:2030))]\n  possf <- melt(possf, id=c(\"SubSector\", \"CountryCode\", \"ProductParentID\"))\n  possf <- rename(possf, c(SubSector='Decile.No', ProductParentID=\"ProductID\", \n                           variable=\"Year\", value=\"est.Pos.norm\"))\n  possf$Year <- sub(\"X\", \"\", possf$Year)\n  possf$Decile.No <- as.numeric(sub(\"Decile \", \"\", possf$Decile.No))\n  \n  possr <- possr[,c(\"Year\", \"Decile.No\", \"CountryCode\", \"CountryName\", \n                    \"Possession\", \"ProductID\", \"Average.income\")]\n  \n  possf <- merge(possf, possr, by=c(\"Year\", \"Decile.No\", \"CountryCode\", \"ProductID\"))\n\n  \n  possf <- possf[,c(\"Year\", \"Decile.No\", \"CountryCode\", \"CountryName\", \"Possession\", \"ProductID\", \n                    \"est.Pos.norm\", \"Average.income\")]\n  \n  \n  final.pbd <- possf\n  \n  save(final.pbd, file=paste0(\"input/Possessions by Decile/final_poss_by_decile RData/final_poss_by_decile \", Sys.Date(), \".RData\"))\n  \n}\n\n\n#graphs to compare old and new data\ncomparing.old.new.data <- function(bigdata, savedir, filename){\n  \n  pdftitle <- paste0(savedir,filename,gsub(\":\",\"-\",Sys.time()),\".pdf\")\n  \n  pdf(pdftitle,width=16 * 0.8,height=13 * 0.7)\n  \n  print(titlepage(title = \"Possessions of HH durables. Cities\", sub = \"Comparing old and new data\", date = Sys.Date(), author = \"JP\", size=15))\n  \n  for (cc in unique(bigdata$CountryCode)){\n    \n    print(cc)\n    ccd <- bigdata[(bigdata$CountryCode %in% cc),]\n    \n    for (pp in unique(ccd$ProductName)){\n      \n      print(pp)\n      \n      years <- as.character(c(2005:2030))\n      maintitle <- paste0(cc, \" - \", pp)\n      \n      frame <- ccd[(ccd$ProductName %in% pp),]\n      \n      frame1 <- frame[,c(\"Year\", \"City\", \"new\")]\n      frame1 <- dcast(frame1, Year~City, value.var = \"new\")\n      row.names(frame1) <- frame1$Year\n      frame1$Year <- NULL\n      \n      frame2 <- frame[,c(\"Year\", \"City\", \"old\")]\n      frame2 <- dcast(frame2, Year~City, value.var = \"old\")\n      row.names(frame2) <- frame2$Year\n      frame2$Year <- NULL\n      \n      total.new <- frame[frame$CityCode==frame$CityCode[1], c(\"Year\", \"t.new\")]\n      total.old <- frame[frame$CityCode==frame$CityCode[1], c(\"Year\", \"t.old\")]\n      \n      matplotf(frame1,legend = F,abline=c(0,100),stx=2005,lty=1,turnoffpar = T,main=maintitle,text = T)\n      matplotf(frame2,legend = F,abline=c(0,100),stx=2005,lty=2,turnoffpar = T,main=maintitle,text = F, add=T)\n      lines(2005:2030,total.new[,2],lwd=4, lty=1)\n      lines(2005:2030,total.old[,2],lwd=4, lty=2)\n      \n      \n    }\n  }\n  \n  dev.off()\n}",
    "created" : 1463642936602.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2499425845",
    "id" : "C77BE645",
    "lastKnownWriteTime" : 1464956907,
    "last_content_update" : 1464956907392,
    "path" : "C:/Users/Domantas/Desktop/justes/PossessionRates/functions.R",
    "project_path" : "functions.R",
    "properties" : {
        "docOutlineSize" : "109.98263041058149",
        "docOutlineVisible" : "0"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}